{"version":3,"sources":["../../src/providers/jsonrpc.ts","../../src/context/starknet.tsx","../../src/providers/paymaster/paymasterrpc.ts","../../src/context/account.tsx","../../src/context/index.tsx","../../src/providers/alchemy.ts","../../src/providers/blast.ts","../../src/providers/cartridge.ts","../../src/providers/infura.ts","../../src/providers/lava.ts","../../src/providers/public.ts","../../src/providers/reddio.ts","../../src/providers/slot.ts"],"sourcesContent":["import type { Chain } from \"@starknet-react/chains\";\nimport { RpcProvider, type RpcProviderOptions } from \"starknet\";\n\nimport { starknetChainId } from \"../context\";\nimport type { ChainProviderFactory } from \"./factory\";\n\n/** Arguments for `jsonRpcProvider`. */\nexport type JsonRpcProviderArgs = {\n  rpc: (chain: Chain) => RpcProviderOptions | null;\n};\n\n/** Configure the JSON-RPC provider using the provided function. */\nexport function jsonRpcProvider({\n  rpc,\n}: JsonRpcProviderArgs): ChainProviderFactory<RpcProvider> {\n  return (chain) => {\n    const config = rpc(chain);\n    if (!config) return null;\n    const chainId = starknetChainId(chain.id);\n\n    const provider = new RpcProvider({ ...config, chainId });\n    return provider;\n  };\n}\n","import {\n  type Address,\n  type Chain,\n  mainnet,\n  sepolia,\n} from \"@starknet-react/chains\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport type React from \"react\";\nimport {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  type AccountInterface,\n  constants,\n  type PaymasterRpc,\n  type ProviderInterface,\n} from \"starknet\";\n\nimport type { Connector } from \"../connectors\";\nimport type { ConnectorData } from \"../connectors/base\";\nimport { ConnectorNotFoundError } from \"../errors\";\nimport type { ExplorerFactory } from \"../explorers/\";\nimport type { ChainProviderFactory } from \"../providers\";\n\nimport { avnuPaymasterProvider } from \"../providers/paymaster\";\nimport type { ChainPaymasterFactory } from \"../providers/paymaster/factory\";\nimport { AccountProvider } from \"./account\";\n\nconst defaultQueryClient = new QueryClient();\n\n/** State of the Starknet context. */\nexport interface StarknetState {\n  /** Connected connector. */\n  connector?: Connector;\n  /** Connect the given connector. */\n  connect: ({ connector }: { connector?: Connector }) => Promise<void>;\n  /** Disconnect the currently connected connector. */\n  disconnect: () => Promise<void>;\n  /** List of registered connectors. */\n  connectors: Connector[];\n  /** Current explorer factory. */\n  explorer?: ExplorerFactory;\n  /** Chains supported by the app. */\n  chains: Chain[];\n  /** Current chain. */\n  chain: Chain;\n  /** Current provider. */\n  provider: ProviderInterface;\n  /** Current paymaster provider */\n  paymasterProvider?: PaymasterRpc;\n  /** Error. */\n  error?: Error;\n}\n\nconst StarknetContext = createContext<StarknetState | undefined>(undefined);\n\n/**\n * Returns the current Starknet context state.\n *\n * @remarks\n *\n * This hook should be used sparingly and will be deprecated.\n *\n * Use the following hooks:\n *\n *  - `account`: `useAccount`\n *  - `connect`, `disconnect`, `connectors`: `useConnectors`\n *\n * @example\n * This example shows how to access the Starknet provider.\n * ```tsx\n * function Component() {\n *   const { library } = useStarknet()\n *\n *   if (!library.provider) return <span>Account URL: {library.baseUrl}</span>\n *   return <span>Provider URL: {library.provider.baseUrl}</span>\n * }\n * ```\n */\nexport function useStarknet(): StarknetState {\n  const state = useContext(StarknetContext);\n  if (!state) {\n    throw new Error(\n      \"useStarknet must be used within a StarknetProvider or StarknetConfig\",\n    );\n  }\n  return state;\n}\n\ninterface StarknetManagerState {\n  currentChain: Chain;\n  connectors: Connector[];\n  currentAddress?: Address;\n  currentProvider: ProviderInterface;\n  currentPaymasterProvider?: PaymasterRpc;\n  error?: Error;\n}\n\ninterface UseStarknetManagerProps {\n  chains: Chain[];\n  provider: ChainProviderFactory;\n  paymasterProvider: ChainPaymasterFactory;\n  explorer?: ExplorerFactory;\n  connectors?: Connector[];\n  autoConnect?: boolean;\n  defaultChainId?: bigint;\n}\n\nfunction useStarknetManager({\n  chains,\n  provider,\n  paymasterProvider,\n  explorer,\n  connectors = [],\n  autoConnect = false,\n  defaultChainId,\n}: UseStarknetManagerProps): StarknetState & {\n  account?: AccountInterface;\n  address?: Address;\n} {\n  const defaultChain = defaultChainId\n    ? (chains.find((c) => c.id === defaultChainId) ?? chains[0])\n    : chains[0];\n  if (defaultChain === undefined) {\n    throw new Error(\"Must provide at least one chain.\");\n  }\n\n  // check for duplicated ids in the chains list\n  const seen = new Set<bigint>();\n\n  for (const chain of chains) {\n    if (seen.has(chain.id)) {\n      throw new Error(`Duplicated chain id found: ${chain.id}`);\n    }\n    seen.add(chain.id);\n  }\n\n  const { chain: _, provider: defaultProvider } = providerForChain(\n    defaultChain,\n    provider,\n  );\n\n  const { paymasterProvider: defaultPaymasterProvider } =\n    paymasterProviderForChain(defaultChain, paymasterProvider);\n\n  // The currently connected connector needs to be accessible from the\n  // event handler.\n  const connectorRef = useRef<Connector | undefined>();\n  const [state, setState] = useState<StarknetManagerState>({\n    currentChain: defaultChain,\n    currentProvider: defaultProvider,\n    currentPaymasterProvider: defaultPaymasterProvider,\n    connectors,\n  });\n\n  const updateChainAndProvider = useCallback(\n    ({ chainId }: { chainId?: bigint }) => {\n      if (!chainId) return;\n      for (const chain of chains) {\n        if (chain.id === chainId) {\n          const { chain: newChain, provider: newProvider } = providerForChain(\n            chain,\n            provider,\n          );\n          const { paymasterProvider: newPaymasterProvider } =\n            paymasterProviderForChain(chain, paymasterProvider);\n          setState((state) => ({\n            ...state,\n            currentChain: newChain,\n            currentProvider: newProvider,\n            currentPaymasterProvider: newPaymasterProvider,\n          }));\n          return;\n        }\n      }\n    },\n    [chains, provider, paymasterProvider],\n  );\n\n  const handleConnectorChange = useCallback(\n    async ({ chainId, account: address }: ConnectorData) => {\n      if (chainId) {\n        updateChainAndProvider({ chainId });\n      }\n\n      if (address && connectorRef.current) {\n        setState((state) => ({\n          ...state,\n          currentAddress: address as Address,\n        }));\n      }\n    },\n    [updateChainAndProvider],\n  );\n\n  // Dependencies intentionally omitted since we only want\n  // this executed when defaultChain is updated.\n  // biome-ignore lint/correctness/useExhaustiveDependencies: want to execute only when defaultChain is updated\n  useEffect(() => {\n    if (!connectorRef.current) {\n      // Only update currentChain if no wallet is connected\n      setState((state) => ({\n        ...state,\n        currentChain: defaultChain,\n        currentProvider: providerForChain(defaultChain, provider).provider,\n        currentPaymasterProvider: paymasterProviderForChain(\n          defaultChain,\n          paymasterProvider,\n        ).paymasterProvider,\n      }));\n    }\n  }, [defaultChain]);\n\n  const disconnect = useCallback(async () => {\n    setState((state) => ({\n      ...state,\n      currentAddress: undefined,\n      currentProvider: defaultProvider,\n      currentPaymasterProvider: defaultPaymasterProvider,\n      currentChain: defaultChain,\n    }));\n\n    if (autoConnect) {\n      localStorage.removeItem(\"lastUsedConnector\");\n    }\n\n    if (!connectorRef.current) return;\n    connectorRef.current.off(\"change\", handleConnectorChange);\n    connectorRef.current.off(\"disconnect\", disconnect);\n\n    try {\n      await connectorRef.current.disconnect();\n    } catch {}\n    connectorRef.current = undefined;\n  }, [\n    autoConnect,\n    handleConnectorChange,\n    defaultProvider,\n    defaultPaymasterProvider,\n    defaultChain,\n  ]);\n\n  const connect = useCallback(\n    async ({ connector }: { connector?: Connector }) => {\n      if (!connector) {\n        throw new Error(\"Must provide a connector.\");\n      }\n\n      const needsListenerSetup = connectorRef.current?.id !== connector.id;\n      if (needsListenerSetup) {\n        connectorRef.current?.off(\"change\", handleConnectorChange);\n        connectorRef.current?.off(\"disconnect\", disconnect);\n      }\n\n      try {\n        const { chainId, account: address } = await connector.connect({\n          chainIdHint: defaultChain.id,\n        });\n\n        if (address !== state.currentAddress) {\n          connectorRef.current = connector;\n\n          setState((state) => ({\n            ...state,\n            currentAddress: address as Address,\n          }));\n        }\n\n        if (autoConnect) {\n          localStorage.setItem(\"lastUsedConnector\", connector.id);\n        }\n\n        if (needsListenerSetup) {\n          connector.on(\"change\", handleConnectorChange);\n          connector.on(\"disconnect\", disconnect);\n        }\n\n        updateChainAndProvider({ chainId });\n      } catch (err) {\n        setState((state) => ({\n          ...state,\n          error: new ConnectorNotFoundError(),\n        }));\n        throw err;\n      }\n    },\n    [\n      autoConnect,\n      state.currentAddress,\n      defaultChain.id,\n      handleConnectorChange,\n      updateChainAndProvider,\n      disconnect,\n    ],\n  );\n\n  // Dependencies intentionally omitted since we only want\n  // this executed once.\n  // biome-ignore lint/correctness/useExhaustiveDependencies: want to execute only once\n  useEffect(() => {\n    async function tryAutoConnect(connectors: Connector[]) {\n      const lastConnectedConnectorId =\n        localStorage.getItem(\"lastUsedConnector\");\n      if (lastConnectedConnectorId === null) {\n        return;\n      }\n\n      const lastConnectedConnector = connectors.find(\n        (connector) => connector.id === lastConnectedConnectorId,\n      );\n      if (lastConnectedConnector === undefined) {\n        return;\n      }\n\n      try {\n        if (!(await lastConnectedConnector.ready())) {\n          // Not authorized anymore.\n          return;\n        }\n\n        connect({ connector: lastConnectedConnector });\n      } catch {\n        // no-op\n      }\n    }\n\n    if (autoConnect && !connectorRef.current) {\n      tryAutoConnect(connectors);\n    }\n  }, []);\n\n  return {\n    address: state.currentAddress,\n    provider: state.currentProvider,\n    paymasterProvider: state.currentPaymasterProvider,\n    chain: state.currentChain,\n    connector: connectorRef.current,\n    explorer,\n    connect,\n    disconnect,\n    connectors,\n    chains,\n  };\n}\n\n/** Arguments for `StarknetProvider`. */\nexport interface StarknetProviderProps {\n  /** Chains supported by the app. */\n  chains: Chain[];\n  /** Provider to use. */\n  provider: ChainProviderFactory;\n  /** Paymaster provider to use. */\n  paymasterProvider?: ChainPaymasterFactory;\n  /** List of connectors to use. */\n  connectors?: Connector[];\n  /** Explorer to use. */\n  explorer?: ExplorerFactory;\n  /** Connect the first available connector on page load. */\n  autoConnect?: boolean;\n  /** React-query client to use. */\n  queryClient?: QueryClient;\n  /** Application. */\n  children?: React.ReactNode;\n  /** Default chain to use when wallet is not connected */\n  defaultChainId?: bigint;\n}\n\n/** Root Starknet context provider. */\nexport function StarknetProvider({\n  chains,\n  provider,\n  paymasterProvider,\n  connectors,\n  explorer,\n  autoConnect,\n  queryClient,\n  defaultChainId,\n  children,\n}: StarknetProviderProps): JSX.Element {\n  const _paymasterProvider = paymasterProvider ?? avnuPaymasterProvider({});\n  const { account, address, ...state } = useStarknetManager({\n    chains,\n    provider,\n    paymasterProvider: _paymasterProvider,\n    explorer,\n    connectors,\n    autoConnect,\n    defaultChainId,\n  });\n\n  return (\n    <QueryClientProvider client={queryClient ?? defaultQueryClient}>\n      <StarknetContext.Provider value={state}>\n        <AccountProvider address={address} account={account}>\n          {children}\n        </AccountProvider>\n      </StarknetContext.Provider>\n    </QueryClientProvider>\n  );\n}\n\nfunction providerForChain(\n  chain: Chain,\n  factory: ChainProviderFactory,\n): { chain: Chain; provider: ProviderInterface } {\n  const provider = factory(chain);\n  if (provider) {\n    return { chain, provider };\n  }\n\n  throw new Error(`No provider found for chain ${chain.name}`);\n}\n\nfunction paymasterProviderForChain(\n  chain: Chain,\n  factory: ChainPaymasterFactory,\n): { chain: Chain; paymasterProvider: PaymasterRpc } {\n  const paymasterProvider = factory(chain);\n  if (paymasterProvider) {\n    return { chain, paymasterProvider };\n  }\n\n  throw new Error(`No paymaster provider found for chain ${chain.name}`);\n}\n\nexport function starknetChainId(\n  chainId: bigint,\n): constants.StarknetChainId | undefined {\n  switch (chainId) {\n    case mainnet.id:\n      return constants.StarknetChainId.SN_MAIN;\n    case sepolia.id:\n      return constants.StarknetChainId.SN_SEPOLIA;\n    default:\n      return undefined;\n  }\n}\n","import type { Chain } from \"@starknet-react/chains\";\nimport { PaymasterRpc, type RpcProviderOptions } from \"starknet\";\n\nimport type { ChainPaymasterFactory } from \"./factory\";\n\n/** Arguments for `jsonRpcProvider`. */\nexport type PaymasterRpcProviderArgs = {\n  rpc: (chain: Chain) => RpcProviderOptions | null;\n};\n\n/** Configure the JSON-RPC provider using the provided function. */\nexport function paymasterRpcProvider({\n  rpc,\n}: PaymasterRpcProviderArgs): ChainPaymasterFactory<PaymasterRpc> {\n  return (chain) => {\n    const config = rpc(chain);\n    if (!config) return null;\n\n    const provider = new PaymasterRpc(config);\n    return provider;\n  };\n}\n","import type { Address } from \"@starknet-react/chains\";\nimport React, { useContext } from \"react\";\n\nimport type { AccountInterface } from \"starknet\";\n\nconst AccountContext = React.createContext<{\n  account: AccountInterface | undefined;\n  address: Address | undefined;\n}>({\n  account: undefined,\n  address: undefined,\n});\n\nexport function useStarknetAccount() {\n  const { account, address } = useContext(AccountContext);\n  return { account, address };\n}\n\nexport function AccountProvider({\n  address,\n  account,\n  children,\n}: {\n  address?: Address;\n  account?: AccountInterface;\n  children: React.ReactNode;\n}) {\n  return (\n    <AccountContext.Provider value={{ account, address }}>\n      {children}\n    </AccountContext.Provider>\n  );\n}\n","import { StarknetProvider, type StarknetProviderProps } from \"./starknet\";\n\nexport { AccountProvider as OverrideAccount } from \"./account\";\nexport { starknetChainId } from \"./starknet\";\n\nexport type StarknetConfigProps = StarknetProviderProps;\n\nexport function StarknetConfig({ children, ...config }: StarknetConfigProps) {\n  return <StarknetProvider {...config}>{children}</StarknetProvider>;\n}\n","import { jsonRpcProvider } from \"./jsonrpc\";\n\n/** Arguments for `alchemyProvider`. */\nexport type AlchemyProviderArgs = {\n  /** Alchemy API key. */\n  apiKey: string;\n};\n\n/** Configure the Alchemy provider using the provided API key. */\nexport function alchemyProvider({ apiKey }: AlchemyProviderArgs) {\n  return jsonRpcProvider({\n    rpc: (chain) => {\n      const baseHttpUrl = chain.rpcUrls[\"alchemy\"]?.http[0];\n      if (!baseHttpUrl) return null;\n      const nodeUrl = `${baseHttpUrl}/${apiKey}`;\n      return { nodeUrl };\n    },\n  });\n}\n","import { jsonRpcProvider } from \"./jsonrpc\";\n\n/** Arguments for `blastProvider`. */\nexport type BlastProviderArgs = {\n  /** Blast API key. */\n  apiKey: string;\n};\n\n/** Configure the Blast provider using the provided API key. */\nexport function blastProvider({ apiKey }: BlastProviderArgs) {\n  return jsonRpcProvider({\n    rpc: (chain) => {\n      const baseHttpUrl = chain.rpcUrls[\"blast\"]?.http[0];\n      if (!baseHttpUrl) return null;\n      const nodeUrl = `${baseHttpUrl}/${apiKey}`;\n      return { nodeUrl };\n    },\n  });\n}\n","import { jsonRpcProvider } from \"./jsonrpc\";\n\n/** Configure the Cartridge provider. */\nexport function cartridgeProvider() {\n  return jsonRpcProvider({\n    rpc: (chain) => {\n      const nodeUrl = chain.rpcUrls[\"cartridge\"]?.http[0];\n      if (!nodeUrl) return null;\n      return { nodeUrl };\n    },\n  });\n}\n","import { jsonRpcProvider } from \"./jsonrpc\";\n\n/** Arguments for `infuraProvider`. */\nexport type InfuraProviderArgs = {\n  /** Infura API key. */\n  apiKey: string;\n};\n\n/** Configure the Infura provider using the provided API key. */\nexport function infuraProvider({ apiKey }: InfuraProviderArgs) {\n  return jsonRpcProvider({\n    rpc: (chain) => {\n      const baseHttpUrl = chain.rpcUrls[\"infura\"]?.http[0];\n      if (!baseHttpUrl) return null;\n      const nodeUrl = `${baseHttpUrl}/${apiKey}`;\n      return { nodeUrl };\n    },\n  });\n}\n","import { jsonRpcProvider } from \"./jsonrpc\";\n\n/** Arguments for `lavaProvider`. */\nexport type LavaProviderArgs = {\n  /** Lava API key. */\n  apiKey: string;\n};\n\n/** Configure the Lava provider using the provided API key. */\nexport function lavaProvider({ apiKey }: LavaProviderArgs) {\n  return jsonRpcProvider({\n    rpc: (chain) => {\n      const baseHttpUrl = chain.rpcUrls[\"lava\"]?.http[0];\n      if (!baseHttpUrl) return null;\n      const nodeUrl = `${baseHttpUrl}/${apiKey}`;\n      return { nodeUrl };\n    },\n  });\n}\n","import { jsonRpcProvider } from \"./jsonrpc\";\n\n/** Configure the provider to use the public RPC endpoint. */\nexport function publicProvider() {\n  return jsonRpcProvider({\n    rpc: (chain) => {\n      // Pick random node from the list of public nodes.\n      const rpcs = chain.rpcUrls.public.http;\n      const nodeUrl = rpcs[Math.floor(Math.random() * rpcs.length)];\n      if (!nodeUrl) return null;\n      return { nodeUrl, specVersion: \"0.8.1\" };\n    },\n  });\n}\n","import { jsonRpcProvider } from \"./jsonrpc\";\n\n/** Arguments for `reddioProvider`. */\nexport type ReddioProviderArgs = {\n  /** Reddio API key. */\n  apiKey: string;\n};\n\n/** Configure the Reddio provider using the provided API key. */\nexport function reddioProvider({ apiKey }: ReddioProviderArgs) {\n  return jsonRpcProvider({\n    rpc: (chain) => {\n      const baseHttpUrl = chain.rpcUrls[\"reddio\"]?.http[0];\n      if (!baseHttpUrl) return null;\n      const nodeUrl = `${baseHttpUrl}/${apiKey}`;\n      return { nodeUrl };\n    },\n  });\n}\n","import { getSlotChain } from \"@starknet-react/chains\";\nimport { jsonRpcProvider } from \"./jsonrpc\";\n\n/** Arguments for `slotProvider`. */\nexport type SlotProviderArgs = {\n  /** The name of your slot instance. */\n  projectId: string;\n};\n\n/** Configure the Slot provider using the provided Project ID. */\nexport function slotProvider({ projectId }: SlotProviderArgs) {\n  return jsonRpcProvider({\n    rpc: () => {\n      const chain = getSlotChain(projectId);\n      const nodeUrl = chain.rpcUrls.public.http[0];\n      return { nodeUrl };\n    },\n  });\n}\n"],"mappings":"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","names":["useContext","jsx","jsx"]}