var MethodType;
(function (MethodType) {
    MethodType[MethodType["Get"] = 0] = "Get";
    MethodType[MethodType["List"] = 1] = "List";
    MethodType[MethodType["Command"] = 2] = "Command";
})(MethodType || (MethodType = {}));
var SessionType;
(function (SessionType) {
    SessionType["READ_ONLY"] = "SESSION_TYPE_READ_ONLY";
    SessionType["READ_WRITE"] = "SESSION_TYPE_READ_WRITE";
})(SessionType || (SessionType = {}));
class TurnkeyRequestError extends Error {
    constructor(input) {
        let turnkeyErrorMessage = `Turnkey error ${input.code}: ${input.message}`;
        if (input.details != null) {
            turnkeyErrorMessage += ` (Details: ${JSON.stringify(input.details)})`;
        }
        super(turnkeyErrorMessage);
        this.name = "TurnkeyRequestError";
        this.details = input.details ?? null;
        this.code = input.code;
    }
}
/**
 * The Client used to authenticate the user.
 */
var AuthClient;
(function (AuthClient) {
    AuthClient["Passkey"] = "passkey";
    AuthClient["Wallet"] = "wallet";
    AuthClient["Iframe"] = "iframe";
})(AuthClient || (AuthClient = {}));

export { AuthClient, MethodType, SessionType, TurnkeyRequestError };
//# sourceMappingURL=base.mjs.map
