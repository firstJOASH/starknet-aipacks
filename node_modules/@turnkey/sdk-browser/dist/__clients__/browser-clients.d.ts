import type { WalletInterface } from "@turnkey/wallet-stamper";
import type { KeyFormat } from "@turnkey/iframe-stamper";
import type * as SdkApiTypes from "../__generated__/sdk_api_types";
import { TurnkeyBaseClient } from "../__clients__/base-client";
import { Session, AuthClient, TurnkeySDKClientConfig, TurnkeyWalletClientConfig, ReadWriteSession, LoginWithBundleParams, LoginWithPasskeyParams, LoginWithWalletParams, RefreshSessionParams } from "@types";
import type { Passkey } from "@models";
export interface OauthProvider {
    providerName: string;
    oidcToken: string;
}
export interface ApiKey {
    apiKeyName: string;
    publicKey: string;
    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
    expirationSeconds?: string;
}
export interface Authenticator {
    authenticatorName: string;
    challenge: string;
    attestation: {
        credentialId: string;
        clientDataJson: string;
        attestationObject: string;
        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
    };
}
interface UpdateUserAuthParams {
    userId: string;
    phoneNumber?: string | null;
    email?: string | null;
    authenticators?: {
        add?: Authenticator[];
        deleteIds?: string[];
    };
    oauthProviders?: {
        add?: OauthProvider[];
        deleteIds?: string[];
    };
    apiKeys?: {
        add?: ApiKey[];
        deleteIds?: string[];
    };
}
interface DeleteUserAuthParams {
    userId: string;
    phoneNumber?: boolean;
    email?: boolean;
    authenticatorIds?: string[];
    oauthProviderIds?: string[];
    apiKeyIds?: string[];
}
interface AddUserAuthParams {
    userId: string;
    phoneNumber?: string;
    email?: string;
    authenticators?: Authenticator[];
    oauthProviders?: OauthProvider[];
    apiKeys?: ApiKey[];
}
export declare class TurnkeyBrowserClient extends TurnkeyBaseClient {
    constructor(config: TurnkeySDKClientConfig, authClient?: AuthClient);
    login: (config?: {
        organizationId?: string;
    }) => Promise<SdkApiTypes.TCreateReadOnlySessionResponse>;
    /**
     * Attempts to refresh an existing Session. This method infers the current user's organization ID and target userId.
     * This will use a passkeyStamper for `READ_ONLY` sessions or an `iframeStamper` for `READ_WRITE` sessions.
     *
     * @param RefreshSessionParams
     *   @param params.sessionType - The type of session that is being refreshed
     *   @param params.targetPublicKey - The public key of the target client
     *   @param params.expirationSeconds - Specify how long to extend the session. Defaults to 900 seconds or 15 minutes.
     * @returns {Promise<void>}
     */
    refreshSession: (params: RefreshSessionParams) => Promise<void>;
    /**
     * Log in with a bundle. This method uses a bundle sent to the end user email
     * To be used in conjunction with an `iframeStamper`.
     *
     * @param LoginWithBundleParams
     *   @param params.bundle - Credential bundle to log in with
     *   @param params.expirationSeconds - Expiration time for the session in seconds. Defaults to 900 seconds or 15 minutes.
     * @returns {Promise<void>}
     */
    loginWithBundle: (params: LoginWithBundleParams) => Promise<void>;
    /**
     * Log in with a session object. This method uses a session object from server actions and stores it and the active client in local storage
     * To be used in conjunction with an `iframeStamper`.
     *
     * @param session
     * @returns {Promise<void>}
     */
    loginWithSession: (session: Session) => Promise<void>;
    /**
     * Log in with a passkey.
     * To be used in conjunction with a `passkeyStamper`
     *
     * @param LoginWithPasskeyParams
     *   @param params.sessionType - The type of session to create
     *   @param params.iframeClient - The iframe client to use to inject the credential bundle
     *   @param params.targetPublicKey - The public key of the target client
     *   @param params.expirationSeconds - Expiration time for the session in seconds. Defaults to 900 seconds or 15 minutes.
     * @returns {Promise<void>}
     */
    loginWithPasskey: (params: LoginWithPasskeyParams) => Promise<void>;
    /**
     * Log in with a browser wallet.
     *
     * @param LoginWithWalletParams
     *   @param params.sessionType - The type of session to create
     *   @param params.iframeClient - The iframe client to use to inject the credential bundle
     *   @param params.targetPublicKey - The public key of the target iframe
     *   @param params.expirationSeconds - The expiration time for the session in seconds
     * @returns {Promise<void>}
     */
    loginWithWallet: (params: LoginWithWalletParams) => Promise<void>;
    /**
     * Creates a read-write session. This method infers the current user's organization ID and target userId.
     * To be used in conjunction with an `iframeStamper`: the resulting session's credential bundle can be
     * injected into an iframeStamper to create a session that enables both read and write requests.
     *
     * @param targetEmbeddedKey
     * @param expirationSeconds
     * @param userId
     * @returns {Promise<SdkApiTypes.TCreateReadWriteSessionResponse>}
     */
    loginWithReadWriteSession: (targetEmbeddedKey: string, expirationSeconds?: string, userId?: string) => Promise<SdkApiTypes.TCreateReadWriteSessionResponse>;
    /**
     * Logs in with an existing auth bundle. this bundle enables both read and write requests.
     *
     * @param credentialBundle
     * @param expirationSeconds
     * @returns {Promise<boolean>}
     */
    loginWithAuthBundle: (credentialBundle: string, expirationSeconds?: string) => Promise<boolean>;
    /**
     * Removes authentication factors from an end user.
     *
     * This function allows selectively removing:
     * - Phone number
     * - Email
     * - Authenticators (by ID)
     * - OAuth providers (by ID)
     * - API keys (by ID)
     *
     * All removal operations are executed in parallel if multiple
     * parameters are provided.
     *
     * @param params - A structured object containing all the removal parameters
     *   @param params.userId - Unique identifier of the user
     *   @param params.phoneNumber - true to remove the phone number
     *   @param params.email - true to remove the email
     *   @param params.authenticatorIds - Array of authenticator IDs to remove
     *   @param params.oauthProviderIds - Array of OAuth provider IDs to remove
     *   @param params.apiKeyIds - Array of API key IDs to remove
     * @returns A promise that resolves to an array of results from each removal operation
     */
    deleteUserAuth: (params: DeleteUserAuthParams) => Promise<any[]>;
    /**
     * Adds or updates authentication factors for an end user.
     *
     * This function allows selectively adding:
     * - Phone number
     * - Email
     * - Authenticators
     * - OAuth providers
     * - API keys
     *
     * All additions/updates are executed in parallel if multiple
     * parameters are provided.
     *
     * @param params - A structured object containing all the addition/update parameters
     *   @param params.userId - Unique identifier of the user
     *   @param params.phoneNumber - New phone number for the user
     *   @param params.email - New email address for the user
     *   @param params.authenticators - Array of authenticator objects to create
     *   @param params.oauthProviders - Array of OAuth provider objects to create
     *   @param params.apiKeys - Array of API key objects to create
     * @returns A promise that resolves to an array of results from each addition or update
     */
    addUserAuth: (params: AddUserAuthParams) => Promise<any[]>;
    /**
     * Comprehensive authentication update for an end user.
     * Combines add/update and delete operations into a single call.
     *
     * The behavior is driven by whether values are set to:
     * - A string/array (to create or update)
     * - `null` or an array of IDs (to remove)
     *
     * All operations are executed in parallel where applicable.
     *
     * @param params - A structured object containing all the update parameters
     *   @param params.userId - Unique identifier of the user
     *   @param params.phoneNumber - String to set (new phone) or `null` to remove
     *   @param params.email - String to set (new email) or `null` to remove
     *   @param params.authenticators - Object describing authenticators to add or remove
     *   @param params.oauthProviders - Object describing OAuth providers to add or remove
     *   @param params.apiKeys - Object describing API keys to add or remove
     *
     * @returns A promise that resolves to a boolean indicating overall success
     */
    updateUserAuth(params: UpdateUserAuthParams): Promise<boolean>;
}
export declare class TurnkeyPasskeyClient extends TurnkeyBrowserClient {
    rpId: string;
    constructor(config: TurnkeySDKClientConfig);
    /**
     * Create a passkey for an end-user, taking care of various lower-level details.
     *
     * @returns {Promise<Passkey>}
     */
    createUserPasskey: (config?: Record<any, any>) => Promise<Passkey>;
    /**
     * Uses passkey authentication to create a read-write session, via an embedded API key,
     * and stores + returns the resulting auth bundle that contains the encrypted API key.
     * This auth bundle (also referred to as a credential bundle) can be injected into an `iframeStamper`,
     * resulting in a touch-free authenticator. Unlike `loginWithReadWriteSession`, this method
     * assumes the end-user's organization ID (i.e. the sub-organization ID) is already known.
     *
     * @param userId
     * @param targetEmbeddedKey
     * @param expirationSeconds
     * @param curveType
     * @returns {Promise<ReadWriteSession>}
     */
    createPasskeySession: (userId: string, targetEmbeddedKey: string, expirationSeconds?: string, organizationId?: string) => Promise<ReadWriteSession>;
}
/**
 * TurnkeyIframeClient is a client that uses an iframe to interact with the Turnkey API.
 * It is used to create read-write sessions, and to inject credential bundles into the iframe.
 * It is also used to extract encrypted credential bundles from the iframe.
 * @extends TurnkeyBrowserClient
 */
export declare class TurnkeyIframeClient extends TurnkeyBrowserClient {
    iframePublicKey: string | null;
    constructor(config: TurnkeySDKClientConfig);
    injectCredentialBundle: (credentialBundle: string) => Promise<boolean>;
    injectWalletExportBundle: (credentialBundle: string, organizationId: string) => Promise<boolean>;
    injectKeyExportBundle: (credentialBundle: string, organizationId: string, keyFormat?: KeyFormat | undefined) => Promise<boolean>;
    injectImportBundle: (bundle: string, organizationId: string, userId: string) => Promise<boolean>;
    extractWalletEncryptedBundle: () => Promise<string>;
    extractKeyEncryptedBundle: () => Promise<string>;
    getEmbeddedPublicKey: () => Promise<string | null>;
    clearEmbeddedKey: () => Promise<null>;
    initEmbeddedKey: () => Promise<string | null>;
}
export declare class TurnkeyWalletClient extends TurnkeyBrowserClient {
    private wallet;
    constructor(config: TurnkeyWalletClientConfig);
    getPublicKey(): Promise<string>;
    getWalletInterface(): WalletInterface;
}
export {};
//# sourceMappingURL=browser-clients.d.ts.map