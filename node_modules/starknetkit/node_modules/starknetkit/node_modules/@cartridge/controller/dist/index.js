import { WalletAccount as Pe, shortString as G, num as Me } from "starknet";
import { R as E, t as Ne, K as De, P as Be, B as ze, N as y, p as Te, A as je } from "./provider-C4iZV8Y5.js";
import { F as fn, h as bn, n as yn, a as wn, b as vn } from "./provider-C4iZV8Y5.js";
import { connect as Ue } from "starknetkit";
import { InjectedConnector as Le } from "starknetkit/injected";
import { MetaMaskSDK as Oe } from "@metamask/sdk";
import { Transaction as Fe } from "@solana/web3.js";
class J extends Pe {
  address;
  keychain;
  modal;
  options;
  constructor(e, t, r, o, a, i) {
    super({ nodeUrl: t }, e), this.address = r, this.keychain = o, this.options = a, this.modal = i;
  }
  /**
   * Invoke execute function in account contract
   *
   * @param calls the invocation object or an array of them, containing:
   * - contractAddress - the address of the contract
   * - entrypoint - the entrypoint of the contract
   * - calldata - (defaults to []) the calldata
   * - signature - (defaults to []) the signature
   * @param abis (optional) the abi of the contract for better displaying
   *
   * @returns response from addTransaction
   */
  async execute(e) {
    return e = Ne(e), new Promise(async (t, r) => {
      const o = await this.keychain.execute(
        e,
        void 0,
        void 0,
        !1,
        this.options?.feeSource
      );
      if (o.code === E.SUCCESS) {
        t(o);
        return;
      }
      if (this.options?.propagateSessionErrors && o.code !== E.USER_INTERACTION_REQUIRED) {
        r(o.error);
        return;
      }
      this.modal.open();
      const a = await this.keychain.execute(
        e,
        void 0,
        void 0,
        !0,
        o.error
      );
      if (a.code === E.SUCCESS) {
        t(a), this.modal.close();
        return;
      }
      r(a.error);
    });
  }
  /**
   * Sign an JSON object for off-chain usage with the starknet private key and return the signature
   * This adds a message prefix so it cant be interchanged with transactions
   *
   * @param json - JSON object to be signed
   * @returns the signature of the JSON object
   * @throws {Error} if the JSON object is not a valid JSON
   */
  async signMessage(e) {
    return new Promise(async (t, r) => {
      const o = await this.keychain.signMessage(e, "", !0);
      if (!("code" in o)) {
        t(o);
        return;
      }
      this.modal.open();
      const a = await this.keychain.signMessage(e, "", !1);
      "code" in a ? r(a.error) : t(a), this.modal.close();
    });
  }
}
var A;
(function(n) {
  n.Call = "call", n.Reply = "reply", n.Syn = "syn", n.SynAck = "synAck", n.Ack = "ack";
})(A || (A = {}));
var R;
(function(n) {
  n.Fulfilled = "fulfilled", n.Rejected = "rejected";
})(R || (R = {}));
var T;
(function(n) {
  n.ConnectionDestroyed = "ConnectionDestroyed", n.ConnectionTimeout = "ConnectionTimeout", n.NoIframeSrc = "NoIframeSrc";
})(T || (T = {}));
var H;
(function(n) {
  n.DataCloneError = "DataCloneError";
})(H || (H = {}));
var I;
(function(n) {
  n.Message = "message";
})(I || (I = {}));
const Qe = (n, e) => {
  const t = [];
  let r = !1;
  return {
    destroy(o) {
      r || (r = !0, e(`${n}: Destroying connection`), t.forEach((a) => {
        a(o);
      }));
    },
    onDestroy(o) {
      r ? o() : t.push(o);
    }
  };
}, We = (n) => (...e) => {
  n && console.log("[Penpal]", ...e);
}, $e = {
  "http:": "80",
  "https:": "443"
}, He = /^(https?:)?\/\/([^/:]+)?(:(\d+))?/, Ye = ["file:", "data:"], qe = (n) => {
  if (n && Ye.find((s) => n.startsWith(s)))
    return "null";
  const e = document.location, t = He.exec(n);
  let r, o, a;
  t ? (r = t[1] ? t[1] : e.protocol, o = t[2], a = t[4]) : (r = e.protocol, o = e.hostname, a = e.port);
  const i = a && a !== $e[r] ? `:${a}` : "";
  return `${r}//${o}${i}`;
}, X = ({ name: n, message: e, stack: t }) => ({
  name: n,
  message: e,
  stack: t
}), Ke = (n) => {
  const e = new Error();
  return Object.keys(n).forEach((t) => e[t] = n[t]), e;
}, Ve = (n, e, t) => {
  const { localName: r, local: o, remote: a, originForSending: i, originForReceiving: s } = n;
  let d = !1;
  const p = (c) => {
    if (c.source !== a || c.data.penpal !== A.Call)
      return;
    if (s !== "*" && c.origin !== s) {
      t(`${r} received message from origin ${c.origin} which did not match expected origin ${s}`);
      return;
    }
    const l = c.data, { methodName: g, args: m, id: f } = l;
    t(`${r}: Received ${g}() call`);
    const C = (b) => (x) => {
      if (t(`${r}: Sending ${g}() reply`), d) {
        t(`${r}: Unable to send ${g}() reply due to destroyed connection`);
        return;
      }
      const k = {
        penpal: A.Reply,
        id: f,
        resolution: b,
        returnValue: x
      };
      b === R.Rejected && x instanceof Error && (k.returnValue = X(x), k.returnValueIsError = !0);
      try {
        a.postMessage(k, i);
      } catch (u) {
        if (u.name === H.DataCloneError) {
          const S = {
            penpal: A.Reply,
            id: f,
            resolution: R.Rejected,
            returnValue: X(u),
            returnValueIsError: !0
          };
          a.postMessage(S, i);
        }
        throw u;
      }
    };
    new Promise((b) => b(e[g].call(e, c.origin).apply(e, m))).then(C(R.Fulfilled), C(R.Rejected));
  };
  return o.addEventListener(I.Message, p), () => {
    d = !0, o.removeEventListener(I.Message, p);
  };
};
let Ge = 0;
const Je = () => ++Ge, he = ".", ue = (n) => n ? n.split(he) : [], Xe = (n) => n.join(he), Ze = (n, e) => {
  const t = ue(e || "");
  return t.push(n), Xe(t);
}, et = (n, e, t) => {
  const r = ue(e);
  return r.reduce((o, a, i) => (typeof o[a] > "u" && (o[a] = {}), i === r.length - 1 && (o[a] = t), o[a]), n), n;
}, fe = (n, e) => {
  const t = {};
  return Object.keys(n).forEach((r) => {
    const o = n[r], a = Ze(r, e);
    typeof o == "object" && Object.assign(t, fe(o, a)), typeof o == "function" && (t[a] = o);
  }), t;
}, tt = (n) => {
  const e = {};
  for (const t in n)
    et(e, t, n[t]);
  return e;
}, nt = (n, e, t, r, o) => {
  const { localName: a, local: i, remote: s, originForSending: d, originForReceiving: p } = e;
  let c = !1;
  o(`${a}: Connecting call sender`);
  const l = (m) => (...f) => {
    o(`${a}: Sending ${m}() call`);
    let C;
    try {
      s.closed && (C = !0);
    } catch {
      C = !0;
    }
    if (C && r(), c) {
      const b = new Error(`Unable to send ${m}() call due to destroyed connection`);
      throw b.code = T.ConnectionDestroyed, b;
    }
    return new Promise((b, x) => {
      const k = Je(), u = (P) => {
        if (P.source !== s || P.data.penpal !== A.Reply || P.data.id !== k)
          return;
        if (p !== "*" && P.origin !== p) {
          o(`${a} received message from origin ${P.origin} which did not match expected origin ${p}`);
          return;
        }
        const Q = P.data;
        o(`${a}: Received ${m}() reply`), i.removeEventListener(I.Message, u);
        let W = Q.returnValue;
        Q.returnValueIsError && (W = Ke(W)), (Q.resolution === R.Fulfilled ? b : x)(W);
      };
      i.addEventListener(I.Message, u);
      const S = {
        penpal: A.Call,
        id: k,
        methodName: m,
        args: f
      };
      s.postMessage(S, d);
    });
  }, g = t.reduce((m, f) => (m[f] = l(f), m), {});
  return Object.assign(n, tt(g)), () => {
    c = !0;
  };
}, rt = (n, e, t, r, o) => {
  const { destroy: a, onDestroy: i } = r;
  let s, d;
  const p = {};
  return (c) => {
    if (e !== "*" && c.origin !== e) {
      o(`Parent: Handshake - Received ACK message from origin ${c.origin} which did not match expected origin ${e}`);
      return;
    }
    o("Parent: Handshake - Received ACK");
    const l = {
      localName: "Parent",
      local: window,
      remote: c.source,
      originForSending: t,
      originForReceiving: e
    };
    s && s(), s = Ve(l, n, o), i(s), d && d.forEach((m) => {
      delete p[m];
    }), d = c.data.methodNames;
    const g = nt(p, l, d, a, o);
    return i(g), p;
  };
}, ot = (n, e, t, r) => (o) => {
  if (!o.source)
    return;
  if (t !== "*" && o.origin !== t) {
    n(`Parent: Handshake - Received SYN message from origin ${o.origin} which did not match expected origin ${t}`);
    return;
  }
  n("Parent: Handshake - Received SYN, responding with SYN-ACK");
  const a = {
    penpal: A.SynAck,
    methodNames: Object.keys(e)
  };
  o.source.postMessage(a, r);
}, at = 6e4, it = (n, e) => {
  const { destroy: t, onDestroy: r } = e, o = setInterval(() => {
    n.isConnected || (clearInterval(o), t());
  }, at);
  r(() => {
    clearInterval(o);
  });
}, st = (n, e) => {
  let t;
  return n !== void 0 && (t = window.setTimeout(() => {
    const r = new Error(`Connection timed out after ${n}ms`);
    r.code = T.ConnectionTimeout, e(r);
  }, n)), () => {
    clearTimeout(t);
  };
}, ct = (n) => {
  if (!n.src && !n.srcdoc) {
    const e = new Error("Iframe must have src or srcdoc property defined.");
    throw e.code = T.NoIframeSrc, e;
  }
}, dt = (n) => {
  let { iframe: e, methods: t = {}, childOrigin: r, timeout: o, debug: a = !1 } = n;
  const i = We(a), s = Qe("Parent", i), { onDestroy: d, destroy: p } = s;
  r || (ct(e), r = qe(e.src));
  const c = r === "null" ? "*" : r, l = fe(t), g = ot(i, l, r, c), m = rt(l, r, c, s, i);
  return {
    promise: new Promise((C, b) => {
      const x = st(o, p), k = (u) => {
        if (!(u.source !== e.contentWindow || !u.data)) {
          if (u.data.penpal === A.Syn) {
            g(u);
            return;
          }
          if (u.data.penpal === A.Ack) {
            const S = m(u);
            S && (x(), C(S));
            return;
          }
        }
      };
      window.addEventListener(I.Message, k), i("Parent: Awaiting handshake"), it(e, s), d((u) => {
        window.removeEventListener(I.Message, k), u && b(u);
      });
    }),
    destroy() {
      p();
    }
  };
};
class be {
  url;
  iframe;
  container;
  onClose;
  constructor({
    id: e,
    url: t,
    preset: r,
    onClose: o,
    onConnect: a,
    methods: i = {}
  }) {
    if (typeof document > "u")
      return;
    r && t.searchParams.set("preset", r), this.url = t;
    const s = document.createElement("iframe");
    s.src = t.toString(), s.id = e, s.style.border = "none", s.sandbox.add("allow-forms"), s.sandbox.add("allow-popups"), s.sandbox.add("allow-popups-to-escape-sandbox"), s.sandbox.add("allow-scripts"), s.sandbox.add("allow-same-origin"), s.allow = "publickey-credentials-create *; publickey-credentials-get *; clipboard-write", document.hasStorageAccess && s.sandbox.add("allow-storage-access-by-user-activation");
    const d = document.createElement("div");
    d.id = "controller", d.style.position = "fixed", d.style.height = "100%", d.style.width = "100%", d.style.top = "0", d.style.left = "0", d.style.zIndex = "10000", d.style.backgroundColor = "rgba(0,0,0,0.6)", d.style.display = "flex", d.style.alignItems = "center", d.style.justifyContent = "center", d.style.visibility = "hidden", d.style.opacity = "0", d.style.transition = "opacity 0.2s ease", d.style.pointerEvents = "auto", d.appendChild(s), this.iframe = s, this.container = d, dt({
      iframe: this.iframe,
      methods: {
        close: (l) => () => this.close(),
        closeAll: (l) => () => {
          document.querySelectorAll(
            'iframe[id^="controller-"]'
          ).forEach((m) => {
            const f = m.parentElement;
            f && (f.style.visibility = "hidden", f.style.opacity = "0");
          }), document.body.style.overflow = "auto";
        },
        reload: (l) => () => window.location.reload(),
        ...i
      }
    }).promise.then(a), this.resize(), window.addEventListener("resize", () => this.resize());
    const p = new MutationObserver(() => {
      const l = document.getElementById("controller");
      document.body && (e === "controller-keychain" && !l || e === "controller-profile") && (document.body.appendChild(d), p.disconnect());
    });
    p.observe(document.documentElement, {
      childList: !0,
      subtree: !0
    });
    const c = document.getElementById("controller");
    document.body && (e === "controller-keychain" && !c || e === "controller-profile") && document.body.appendChild(d), this.onClose = o;
  }
  open() {
    this.container && (document.body.style.overflow = "hidden", this.container.style.visibility = "visible", this.container.style.opacity = "1");
  }
  close() {
    this.container && (this.onClose?.(), document.body.style.overflow = "auto", this.container.style.visibility = "hidden", this.container.style.opacity = "0");
  }
  sendBackward() {
    this.container && (this.container.style.zIndex = "9999");
  }
  sendForward() {
    this.container && (this.container.style.zIndex = "10000");
  }
  resize() {
    if (this.iframe) {
      if (this.iframe.style.userSelect = "none", window.innerWidth < 768) {
        this.iframe.style.height = "100%", this.iframe.style.width = "100%", this.iframe.style.borderRadius = "0";
        return;
      }
      this.iframe.style.height = "600px", this.iframe.style.width = "432px", this.iframe.style.borderRadius = "8px";
    }
  }
}
class pt {
  type = "argent";
  platform = "starknet";
  wallet = void 0;
  account = void 0;
  connectedAccounts = [];
  isAvailable() {
    return typeof window < "u" && !!window.starknet_argentX;
  }
  getInfo() {
    const e = this.isAvailable();
    return {
      type: this.type,
      available: e,
      version: e ? window.starknet_argentX?.version || "Unknown" : void 0,
      chainId: e ? window.starknet_argentX?.chainId : void 0,
      name: "Argent",
      platform: this.platform
    };
  }
  async connect() {
    if (this.account)
      return { success: !0, wallet: this.type, account: this.account };
    try {
      if (!this.isAvailable())
        throw new Error("Argent is not available");
      const { wallet: e, connectorData: t } = await Ue({
        connectors: [new Le({ options: { id: "argentX" } })]
      });
      if (!e)
        throw new Error("No wallet found");
      return this.wallet = e, this.account = t?.account, { success: !0, wallet: this.type, account: this.account };
    } catch (e) {
      return console.error("Error connecting to Argent:", e), {
        success: !1,
        wallet: this.type,
        error: e.message || "Unknown error"
      };
    }
  }
  getConnectedAccounts() {
    return this.connectedAccounts;
  }
  async signTypedData(e) {
    try {
      if (!this.isAvailable() || !this.wallet)
        throw new Error("Argent is not connected");
      const t = await this.wallet.request({
        type: "wallet_signTypedData",
        params: e
      });
      return { success: !0, wallet: this.type, result: t };
    } catch (t) {
      return console.error("Error signing typed data with Argent:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
  async sendTransaction(e) {
    return {
      success: !1,
      wallet: this.type,
      error: "Not implemented"
    };
  }
  async switchChain(e) {
    return console.warn(
      "Chain switching for Argent may require custom implementation"
    ), !1;
  }
  async getBalance(e) {
    try {
      if (!this.isAvailable() || !this.wallet)
        throw new Error("Argent is not connected");
      return {
        success: !0,
        wallet: this.type,
        result: "Implement based on Argent API"
      };
    } catch (t) {
      return console.error("Error getting balance from Argent:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
}
function lt(n) {
  if (typeof window > "u")
    return;
  const e = (t) => n(t.detail);
  return window.addEventListener("eip6963:announceProvider", e), window.dispatchEvent(new CustomEvent("eip6963:requestProvider")), () => window.removeEventListener("eip6963:announceProvider", e);
}
function ye() {
  const n = /* @__PURE__ */ new Set();
  let e = [];
  const t = () => lt((o) => {
    e.some(({ info: a }) => a.uuid === o.info.uuid) || (e = [...e, o], n.forEach((a) => a(e, { added: [o] })));
  });
  let r = t();
  return {
    _listeners() {
      return n;
    },
    clear() {
      n.forEach((o) => o([], { removed: [...e] })), e = [];
    },
    destroy() {
      this.clear(), n.clear(), r?.();
    },
    findProvider({ rdns: o }) {
      return e.find((a) => a.info.rdns === o);
    },
    getProviders() {
      return e;
    },
    reset() {
      this.clear(), r?.(), r = t();
    },
    subscribe(o, { emitImmediately: a } = {}) {
      return n.add(o), a && o(e, { added: e }), () => n.delete(o);
    }
  };
}
class gt {
  type = "metamask";
  platform = "ethereum";
  MMSDK;
  store = ye();
  account = void 0;
  connectedAccounts = [];
  constructor() {
    this.MMSDK = new Oe({
      dappMetadata: {
        name: "Cartridge Controller",
        url: window.location.href
      }
    }), this.isAvailable() && this.MMSDK.sdkInitPromise?.then(() => {
      this.MMSDK.getProvider()?.request({
        method: "eth_accounts"
      }).then((e) => {
        e && e.length > 0 && (this.account = e[0], this.connectedAccounts = e);
      }), this.MMSDK.getProvider()?.on("accountsChanged", (e) => {
        Array.isArray(e) && (this.account = e?.[0], this.connectedAccounts = e);
      });
    });
  }
  isAvailable() {
    return typeof window < "u" && this.store.getProviders().some((e) => e.info.rdns === "io.metamask");
  }
  getInfo() {
    const e = this.isAvailable();
    return {
      type: this.type,
      available: e,
      version: e ? window.ethereum?.version || "Unknown" : void 0,
      chainId: e ? window.ethereum?.chainId : void 0,
      name: "MetaMask",
      platform: this.platform,
      connectedAccounts: this.connectedAccounts
    };
  }
  async connect(e) {
    if (e && this.connectedAccounts.includes(e) && (this.account = e), this.account)
      return { success: !0, wallet: this.type, account: this.account };
    try {
      if (!this.isAvailable())
        throw new Error("MetaMask is not available");
      const t = await this.MMSDK.connect();
      if (t && t.length > 0)
        return this.account = t[0], this.connectedAccounts = t, { success: !0, wallet: this.type, account: this.account };
      throw new Error("No accounts found");
    } catch (t) {
      return console.error("Error connecting to MetaMask:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
  getConnectedAccounts() {
    return this.connectedAccounts;
  }
  async signTransaction(e) {
    try {
      if (!this.isAvailable() || !this.account)
        throw new Error("MetaMask is not connected");
      const t = this.MMSDK.getProvider();
      if (!t)
        throw new Error("MetaMask is not connected");
      const r = await t.request({
        method: "eth_sendTransaction",
        params: [e]
      });
      return { success: !0, wallet: this.type, result: r };
    } catch (t) {
      return console.error("Error signing transaction with MetaMask:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
  async signMessage(e) {
    try {
      if (!this.isAvailable() || !this.account)
        throw new Error("MetaMask is not connected");
      const t = await this.MMSDK.getProvider()?.request({
        method: "personal_sign",
        params: [this.account, e]
      });
      return { success: !0, wallet: this.type, result: t };
    } catch (t) {
      return console.error("Error signing message with MetaMask:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
  async signTypedData(e) {
    try {
      if (!this.isAvailable() || !this.account)
        throw new Error("MetaMask is not connected");
      const t = this.MMSDK.getProvider();
      if (!t)
        throw new Error("MetaMask is not connected");
      const r = await t.request({
        method: "eth_signTypedData_v4",
        params: [this.account, JSON.stringify(e)]
      });
      return { success: !0, wallet: this.type, result: r };
    } catch (t) {
      return console.error("Error signing typed data with MetaMask:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
  async sendTransaction(e) {
    return {
      success: !1,
      wallet: this.type,
      error: "Not implemented"
    };
  }
  async switchChain(e) {
    try {
      if (!this.isAvailable())
        throw new Error("MetaMask is not available");
      const t = this.MMSDK.getProvider();
      if (!t)
        throw new Error("MetaMask is not connected");
      try {
        return await t.request({
          method: "wallet_switchEthereumChain",
          params: [{ chainId: e }]
        }), !0;
      } catch (r) {
        throw r.code === 4902 && console.warn("Chain not added to MetaMask"), r;
      }
    } catch (t) {
      return console.error("Error switching chain for MetaMask:", t), !1;
    }
  }
  async getBalance(e) {
    try {
      if (!this.isAvailable() || !this.account)
        throw new Error("MetaMask is not connected");
      if (e)
        return {
          success: !1,
          wallet: this.type,
          error: "Not implemented for ERC20"
        };
      {
        const t = this.MMSDK.getProvider();
        if (!t)
          throw new Error("MetaMask is not connected");
        const r = await t.request({
          method: "eth_getBalance",
          params: [this.account, "latest"]
        });
        return { success: !0, wallet: this.type, result: r };
      }
    } catch (t) {
      return console.error("Error getting balance from MetaMask:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
}
class mt {
  type = "phantom";
  platform = "solana";
  account = void 0;
  connectedAccounts = [];
  getProvider() {
    if (typeof window > "u")
      throw new Error("Not ready");
    const e = window.solana;
    if (!e?.isPhantom)
      throw new Error("Phantom is not available");
    return e;
  }
  isAvailable() {
    return typeof window < "u" && !!window.solana?.isPhantom;
  }
  getInfo() {
    const e = this.isAvailable();
    return {
      type: this.type,
      available: e,
      version: "Unknown",
      name: "Phantom",
      platform: this.platform
    };
  }
  async connect() {
    if (this.account)
      return { success: !0, wallet: this.type, account: this.account };
    try {
      if (!this.isAvailable())
        throw new Error("Phantom is not available");
      const e = await this.getProvider().connect();
      if (e.publicKey)
        return this.account = e.publicKey.toString(), { success: !0, wallet: this.type, account: this.account };
      throw new Error("No accounts found");
    } catch (e) {
      return console.error("Error connecting to Phantom:", e), {
        success: !1,
        wallet: this.type,
        error: e.message || "Unknown error"
      };
    }
  }
  getConnectedAccounts() {
    return this.connectedAccounts;
  }
  async signMessage(e) {
    try {
      if (!this.isAvailable() || !this.account)
        throw new Error("Phantom is not connected");
      const t = new TextEncoder().encode(e), r = await this.getProvider().signMessage(
        t,
        "utf8"
      );
      return { success: !0, wallet: this.type, result: r };
    } catch (t) {
      return console.error("Error signing message with Phantom:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
  async sendTransaction(e) {
    if (!this.isAvailable() || !this.account)
      throw new Error("Phantom is not connected");
    try {
      const t = Fe.from(e), o = await this.getProvider().signAndSendTransaction(t);
      return {
        success: !0,
        wallet: this.type,
        result: o
      };
    } catch (t) {
      return console.error("Error sending transaction with Phantom:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
  async switchChain(e) {
    return console.warn("Chain switching not supported for Phantom"), !1;
  }
  async getBalance(e) {
    try {
      if (!this.isAvailable() || !this.account)
        throw new Error("Phantom is not connected");
      return {
        success: !0,
        wallet: this.type,
        result: "Implement based on Phantom API"
      };
    } catch (t) {
      return console.error("Error getting balance from Phantom:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
}
const ht = "io.rabby";
class ut {
  type = "rabby";
  platform = "ethereum";
  account = void 0;
  store = ye();
  provider;
  connectedAccounts = [];
  constructor() {
    this.provider = this.store.getProviders().find((e) => e.info.rdns === ht), this.provider?.provider.request({
      method: "eth_accounts"
    }).then((e) => {
      this.connectedAccounts = e;
    }), this.provider?.provider?.on("accountsChanged", (e) => {
      e && (this.connectedAccounts = e.map(
        (t) => t.toLowerCase()
      ), this.account = e?.[0]?.toLowerCase());
    });
  }
  isAvailable() {
    return !!this.provider;
  }
  getInfo() {
    const e = this.isAvailable();
    return {
      type: this.type,
      available: e,
      version: e ? window.ethereum?.version || "Unknown" : void 0,
      chainId: e ? window.ethereum?.chainId : void 0,
      name: "Rabby",
      platform: this.platform,
      connectedAccounts: this.connectedAccounts
    };
  }
  async connect(e) {
    if (e && this.connectedAccounts.includes(e.toLowerCase()) && (this.account = e.toLowerCase()), this.account)
      return { success: !0, wallet: this.type, account: this.account };
    try {
      if (!this.isAvailable())
        throw new Error("Rabby is not available");
      const t = await this.provider?.provider.request({
        method: "eth_requestAccounts"
      });
      if (t && t.length > 0)
        return this.account = t[0], this.connectedAccounts = t, { success: !0, wallet: this.type, account: this.account };
      throw new Error("No accounts found");
    } catch (t) {
      return console.error("Error connecting to Rabby:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
  getConnectedAccounts() {
    return this.connectedAccounts;
  }
  async signTransaction(e) {
    try {
      if (!this.isAvailable() || !this.account)
        throw new Error("Rabby is not connected");
      const t = this.provider?.provider;
      if (!t)
        throw new Error("Rabby is not connected");
      const r = await t.request({
        method: "eth_sendTransaction",
        params: [e]
      });
      return { success: !0, wallet: this.type, result: r };
    } catch (t) {
      return console.error("Error signing transaction with Rabby:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
  async signMessage(e) {
    try {
      if (!this.isAvailable() || !this.account)
        throw new Error("Rabby is not connected");
      const t = await this.provider?.provider.request({
        method: "personal_sign",
        params: [this.account, e]
      });
      return { success: !0, wallet: this.type, result: t };
    } catch (t) {
      return console.error("Error signing message with Rabby:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
  async signTypedData(e) {
    try {
      if (!this.isAvailable() || !this.account)
        throw new Error("Rabby is not connected");
      const t = this.provider?.provider;
      if (!t)
        throw new Error("Rabby is not connected");
      const r = await t.request({
        method: "eth_signTypedData_v4",
        params: [this.account, JSON.stringify(e)]
      });
      return { success: !0, wallet: this.type, result: r };
    } catch (t) {
      return console.error("Error signing typed data with Rabby:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
  async sendTransaction(e) {
    return {
      success: !1,
      wallet: this.type,
      error: "Not implemented"
    };
  }
  async switchChain(e) {
    try {
      if (!this.isAvailable())
        throw new Error("Rabby is not available");
      const t = this.provider?.provider;
      if (!t)
        throw new Error("Rabby is not connected");
      try {
        return await t.request({
          method: "wallet_switchEthereumChain",
          params: [{ chainId: e }]
        }), !0;
      } catch (r) {
        throw r.code === 4902 && console.warn("Chain not added to Rabby"), r;
      }
    } catch (t) {
      return console.error("Error switching chain for Rabby:", t), !1;
    }
  }
  async getBalance(e) {
    try {
      if (!this.isAvailable() || !this.account)
        throw new Error("Rabby is not connected");
      if (e)
        return {
          success: !1,
          wallet: this.type,
          error: "Not implemented for ERC20"
        };
      {
        const t = this.provider?.provider;
        if (!t)
          throw new Error("Rabby is not connected");
        const r = await t.request({
          method: "eth_getBalance",
          params: [this.account, "latest"]
        });
        return { success: !0, wallet: this.type, result: r };
      }
    } catch (t) {
      return console.error("Error getting balance from Rabby:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
}
class ft {
  walletAdapters;
  constructor() {
    this.walletAdapters = /* @__PURE__ */ new Map();
    const e = new gt();
    e.isAvailable() && this.walletAdapters.set("metamask", e);
    const t = new mt();
    t.isAvailable() && this.walletAdapters.set("phantom", t);
    const r = new pt();
    r.isAvailable() && this.walletAdapters.set("argent", r);
    const o = new ut();
    o.isAvailable() && this.walletAdapters.set("rabby", o), typeof window < "u" && (window.wallet_bridge = this);
  }
  getIFrameMethods() {
    return {
      externalDetectWallets: (e) => () => this.detectWallets(),
      externalConnectWallet: (e) => (t, r) => this.connectWallet(t, r),
      externalSignMessage: (e) => (t, r) => this.signMessage(t, r),
      externalSignTypedData: (e) => (t, r) => this.signTypedData(t, r),
      externalSendTransaction: (e) => (t, r) => this.sendTransaction(t, r),
      externalGetBalance: (e) => (t, r) => this.getBalance(t, r)
    };
  }
  async detectWallets() {
    return Array.from(this.walletAdapters.values()).map(
      (t) => t.getInfo()
    );
  }
  getWalletAdapterByType(e) {
    const t = this.walletAdapters.get(e);
    if (!t)
      throw new Error(`Unsupported wallet type: ${e}`);
    return t;
  }
  handleError(e, t, r, o) {
    const a = t instanceof Error ? t.message : "Unknown error";
    let i = "unknown";
    if (typeof e == "string") {
      const s = this.getConnectedWalletAdapter(e);
      i = o ?? s?.type ?? e;
    } else
      i = e;
    return console.error(`Error ${r} with ${e} wallet:`, t), {
      success: !1,
      wallet: i,
      error: a
    };
  }
  async connectWallet(e, t) {
    try {
      const o = await this.getWalletAdapterByType(e).connect(t);
      if (o.success && o.account)
        console.log(
          `Wallet ${e} connected with address ${o.account}`
        );
      else if (o.success && !o.account)
        return console.error(
          `Wallet ${e} connected successfully but did not provide an address.`
        ), {
          ...o,
          success: !1,
          error: "Wallet connected but address not found."
        };
      return o;
    } catch (r) {
      return this.handleError(e, r, "connecting to");
    }
  }
  getConnectedWalletAdapter(e) {
    let t;
    if (typeof e == "string" ? t = this.walletAdapters.values().find(
      (r) => r.getConnectedAccounts().includes(e.toLowerCase())
    ) : t = this.walletAdapters.get(e), !t && typeof e == "string" && (t = this.walletAdapters.values().find(
      (r) => r.getConnectedAccounts().includes(e.toLowerCase())
    )), !t)
      throw new Error(
        `Wallet with identifier ${e} is not connected or supported`
      );
    return t;
  }
  async signMessage(e, t) {
    let r;
    try {
      if (r = this.getConnectedWalletAdapter(e), !r.signMessage)
        throw new Error(
          `Wallet type ${r.type} (identifier: ${e}) does not support signing messages`
        );
      return await r.signMessage(t);
    } catch (o) {
      return this.handleError(
        e,
        o,
        "signing message with",
        r?.type
      );
    }
  }
  async signTypedData(e, t) {
    let r;
    try {
      if (r = this.getConnectedWalletAdapter(e), !r.signTypedData)
        throw new Error(
          `Wallet type ${r.type} (identifier: ${e}) does not support signing typed data`
        );
      return await r.signTypedData(t);
    } catch (o) {
      return this.handleError(
        e,
        o,
        "signing typed data with",
        r?.type
      );
    }
  }
  async sendTransaction(e, t) {
    let r;
    try {
      return r = this.getConnectedWalletAdapter(e), await r.sendTransaction(t);
    } catch (o) {
      return this.handleError(
        e,
        o,
        "sending transaction with",
        r?.type
      );
    }
  }
  async getBalance(e, t) {
    let r;
    try {
      return r = this.getConnectedWalletAdapter(e), await r.getBalance(t);
    } catch (o) {
      return this.handleError(
        e,
        o,
        "getting balance from",
        r?.type
      );
    }
  }
}
class bt extends be {
  walletBridge;
  constructor({ url: e, policies: t, ...r }) {
    const o = new URL(e ?? De), a = new ft();
    t && o.searchParams.set(
      "policies",
      encodeURIComponent(JSON.stringify(t))
    ), super({
      ...r,
      id: "controller-keychain",
      url: o,
      methods: a.getIFrameMethods()
    }), this.walletBridge = a, typeof window < "u" && (window.external_wallets = this.walletBridge);
  }
  getWalletBridge() {
    return this.walletBridge;
  }
}
class yt extends be {
  constructor({
    profileUrl: e,
    rpcUrl: t,
    version: r,
    username: o,
    slot: a,
    namespace: i,
    tokens: s,
    policies: d,
    ...p
  }) {
    const c = (e || Be).replace(/\/$/, "");
    let l = new URL(
      a ? `${c}/account/${o}/slot/${a}` : `${c}/account/${o}`
    );
    if (a && l.searchParams.set("ps", encodeURIComponent(a)), i && l.searchParams.set("ns", encodeURIComponent(i)), r && l.searchParams.set("v", encodeURIComponent(r)), l.searchParams.set("rpcUrl", encodeURIComponent(t)), s?.erc20 && l.searchParams.set(
      "erc20",
      encodeURIComponent(s.erc20.toString())
    ), d?.contracts) {
      const g = Object.values(d.contracts).flatMap(
        (m) => m.methods
      );
      l.searchParams.set(
        "methods",
        encodeURIComponent(JSON.stringify(g))
      );
    }
    super({
      ...p,
      id: "controller-profile",
      url: l
    });
  }
}
class an extends ze {
  keychain;
  profile;
  options;
  iframes;
  selectedChain;
  chains;
  constructor(e) {
    super(), this.selectedChain = e.defaultChainId, this.chains = /* @__PURE__ */ new Map(), this.iframes = {
      keychain: new bt({
        ...e,
        onClose: this.keychain?.reset,
        onConnect: (t) => {
          this.keychain = t;
        }
      })
    }, this.options = e, this.validateChains(e.chains), typeof window < "u" && (window.starknet_controller = this);
  }
  async probe() {
    try {
      if (await this.waitForKeychain(), !this.keychain) {
        console.error(new y().message);
        return;
      }
      const e = await this.keychain.probe(this.rpcUrl());
      let t = e?.rpcUrl || this.rpcUrl();
      this.account = new J(
        this,
        t,
        e.address,
        this.keychain,
        this.options,
        this.iframes.keychain
      );
    } catch (e) {
      console.error(e);
      return;
    }
    if (!this.iframes.profile) {
      const e = await this.keychain.username();
      this.iframes.profile = new yt({
        ...this.options,
        onConnect: (t) => {
          this.profile = t;
        },
        methods: {
          openSettings: () => this.openSettings.bind(this),
          openPurchaseCredits: () => this.openPurchaseCredits.bind(this),
          openExecute: () => this.openExecute.bind(this)
        },
        rpcUrl: this.rpcUrl(),
        username: e,
        version: this.version
      });
    }
    return this.account;
  }
  async connect() {
    if (this.account)
      return this.account;
    if (!this.keychain || !this.iframes.keychain) {
      console.error(new y().message);
      return;
    }
    document.hasStorageAccess && (await document.hasStorageAccess() || await document.requestStorageAccess()), this.iframes.keychain.open();
    try {
      let e = await this.keychain.connect(
        this.options.policies || {},
        this.rpcUrl()
      );
      if (e.code !== E.SUCCESS)
        throw new Error(e.message);
      return e = e, this.account = new J(
        this,
        this.rpcUrl(),
        e.address,
        this.keychain,
        this.options,
        this.iframes.keychain
      ), this.account;
    } catch (e) {
      console.log(e);
    } finally {
      this.iframes.keychain.close();
    }
  }
  async switchStarknetChain(e) {
    if (!this.keychain || !this.iframes.keychain)
      return console.error(new y().message), !1;
    try {
      if (this.selectedChain = e, (await this.keychain.probe(this.rpcUrl())).rpcUrl === this.rpcUrl())
        return !0;
      await this.keychain.switchChain(this.rpcUrl()), await this.profile?.switchChain(this.rpcUrl());
    } catch (t) {
      return console.error(t), !1;
    }
    return this.emitNetworkChanged(e), !0;
  }
  addStarknetChain(e) {
    return Promise.resolve(!0);
  }
  async disconnect() {
    if (!this.keychain) {
      console.error(new y().message);
      return;
    }
    return document.hasStorageAccess && (await document.hasStorageAccess() || await document.requestStorageAccess()), this.account = void 0, this.keychain.disconnect();
  }
  async openProfile(e = "inventory") {
    if (!this.profile || !this.iframes.profile?.url) {
      console.error("Profile is not ready");
      return;
    }
    if (!this.account) {
      console.error("Account is not ready");
      return;
    }
    this.profile.navigate(`${this.iframes.profile.url?.pathname}/${e}`), this.iframes.profile.open();
  }
  async openProfileTo(e) {
    if (!this.profile || !this.iframes.profile?.url) {
      console.error("Profile is not ready");
      return;
    }
    if (!this.account) {
      console.error("Account is not ready");
      return;
    }
    this.profile.navigate(`${this.iframes.profile.url?.pathname}/${e}`), this.iframes.profile.open();
  }
  async openProfileAt(e) {
    if (!this.profile || !this.iframes.profile?.url) {
      console.error("Profile is not ready");
      return;
    }
    if (!this.account) {
      console.error("Account is not ready");
      return;
    }
    this.profile.navigate(e), this.iframes.profile.open();
  }
  async openSettings() {
    if (!this.keychain || !this.iframes.keychain)
      return console.error(new y().message), null;
    this.iframes.profile?.sendBackward ? this.iframes.profile?.sendBackward() : this.iframes.profile?.close(), this.iframes.keychain.open();
    const e = await this.keychain.openSettings();
    return this.iframes.keychain.close(), this.iframes.profile?.sendForward?.(), !(e && e.code === E.NOT_CONNECTED);
  }
  revoke(e, t) {
    return this.keychain ? this.keychain.revoke(e) : (console.error(new y().message), null);
  }
  rpcUrl() {
    const e = this.chains.get(this.selectedChain);
    if (!e) {
      const t = Array.from(this.chains.keys()).map(
        (r) => G.decodeShortString(r)
      );
      throw new Error(
        `Chain not found: ${G.decodeShortString(this.selectedChain)}. Available chains: ${t.join(", ")}`
      );
    }
    return e.rpcUrl;
  }
  username() {
    if (!this.keychain) {
      console.error(new y().message);
      return;
    }
    return this.keychain.username();
  }
  openPurchaseCredits() {
    if (!this.keychain || !this.iframes.keychain) {
      console.error(new y().message);
      return;
    }
    if (!this.iframes.profile) {
      console.error("Profile is not ready");
      return;
    }
    this.iframes.profile.close(), this.iframes.keychain.open(), this.keychain.openPurchaseCredits();
  }
  openStarterPack(e) {
    if (!this.keychain || !this.iframes.keychain) {
      console.error(new y().message);
      return;
    }
    if (!this.iframes.profile) {
      console.error("Profile is not ready");
      return;
    }
    this.iframes.profile.close(), this.iframes.keychain.open(), this.keychain.openStarterPack(e);
  }
  async openExecute(e, t) {
    if (!this.keychain || !this.iframes.keychain) {
      console.error(new y().message);
      return;
    }
    if (!this.iframes.profile) {
      console.error("Profile is not ready");
      return;
    }
    let r = this.selectedChain;
    t && this.switchStarknetChain(t), this.iframes.profile?.sendBackward(), this.iframes.keychain.open(), this.iframes.profile?.close();
    const o = await this.keychain.execute(e, void 0, void 0, !0);
    return this.iframes.profile?.open(), this.iframes.keychain.close(), this.iframes.profile?.sendForward(), t && this.switchStarknetChain(r), {
      status: !(o && (o.code === E.NOT_CONNECTED || o.code === E.CANCELED)),
      transactionHash: o?.transaction_hash
    };
  }
  async delegateAccount() {
    return this.keychain ? await this.keychain.delegateAccount() : (console.error(new y().message), null);
  }
  async validateChains(e) {
    for (const t of e)
      try {
        const r = new URL(t.rpcUrl), o = await Te(r);
        this.chains.set(o, t);
      } catch (r) {
        console.error(`Failed to parse chainId for ${t.rpcUrl}:`, r);
      }
    this.chains.has(this.selectedChain) || console.warn(
      `Selected chain ${this.selectedChain} not found in configured chains. Available chains: ${Array.from(this.chains.keys()).join(", ")}`
    );
  }
  waitForKeychain({
    timeout: e = 5e4,
    interval: t = 100
  } = {}) {
    return new Promise((r, o) => {
      const a = Date.now(), i = setInterval(() => {
        if (Date.now() - a > e) {
          clearInterval(i), o(new Error("Timeout waiting for keychain"));
          return;
        }
        this.keychain && (clearInterval(i), r());
      }, t);
    });
  }
}
const D = /* @__PURE__ */ new Map();
async function we(n) {
  if (!n.addresses?.length && !n.usernames?.length)
    return { results: [] };
  const e = await fetch(`${je}/lookup`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(n)
  });
  if (!e.ok)
    throw new Error(`HTTP error! status: ${e.status}`);
  return e.json();
}
async function sn(n) {
  const e = n.filter((t) => !D.has(t));
  return e.length > 0 && (await we({ usernames: e })).results.forEach((r) => {
    D.set(r.username, r.addresses[0]);
  }), new Map(
    n.map((t) => [t, D.get(t)]).filter((t) => t[1] !== void 0)
  );
}
async function cn(n) {
  n = n.map(Me.toHex);
  const e = n.filter((t) => !D.has(t));
  return e.length > 0 && (await we({
    addresses: e
  })).results.forEach((r) => {
    D.set(r.addresses[0], r.username);
  }), new Map(
    n.map((t) => [t, D.get(t)]).filter((t) => t[1] !== void 0)
  );
}
const wt = "6.13.7";
function Z(n, e, t) {
  for (let r in e) {
    let o = e[r];
    Object.defineProperty(n, r, { enumerable: !0, value: o, writable: !1 });
  }
}
function N(n) {
  if (n == null)
    return "null";
  if (Array.isArray(n))
    return "[ " + n.map(N).join(", ") + " ]";
  if (n instanceof Uint8Array) {
    const e = "0123456789abcdef";
    let t = "0x";
    for (let r = 0; r < n.length; r++)
      t += e[n[r] >> 4], t += e[n[r] & 15];
    return t;
  }
  if (typeof n == "object" && typeof n.toJSON == "function")
    return N(n.toJSON());
  switch (typeof n) {
    case "boolean":
    case "symbol":
      return n.toString();
    case "bigint":
      return BigInt(n).toString();
    case "number":
      return n.toString();
    case "string":
      return JSON.stringify(n);
    case "object": {
      const e = Object.keys(n);
      return e.sort(), "{ " + e.map((t) => `${N(t)}: ${N(n[t])}`).join(", ") + " }";
    }
  }
  return "[ COULD NOT SERIALIZE ]";
}
function vt(n, e, t) {
  let r = n;
  {
    const a = [];
    if (t) {
      if ("message" in t || "code" in t || "name" in t)
        throw new Error(`value will overwrite populated values: ${N(t)}`);
      for (const i in t) {
        if (i === "shortMessage")
          continue;
        const s = t[i];
        a.push(i + "=" + N(s));
      }
    }
    a.push(`code=${e}`), a.push(`version=${wt}`), a.length && (n += " (" + a.join(", ") + ")");
  }
  let o;
  switch (e) {
    case "INVALID_ARGUMENT":
      o = new TypeError(n);
      break;
    case "NUMERIC_FAULT":
    case "BUFFER_OVERRUN":
      o = new RangeError(n);
      break;
    default:
      o = new Error(n);
  }
  return Z(o, { code: e }), t && Object.assign(o, t), o.shortMessage == null && Z(o, { shortMessage: r }), o;
}
function F(n, e, t, r) {
  if (!n)
    throw vt(e, t, r);
}
function h(n, e, t, r) {
  F(n, e, "INVALID_ARGUMENT", { argument: t, value: r });
}
["NFD", "NFC", "NFKD", "NFKC"].reduce((n, e) => {
  try {
    if ("test".normalize(e) !== "test")
      throw new Error("bad");
    if (e === "NFD" && "é".normalize("NFD") !== "é")
      throw new Error("broken");
    n.push(e);
  } catch {
  }
  return n;
}, []);
function _t(n, e, t) {
  if (n !== e) {
    let r = t, o = "new";
    r += ".", o += " " + t, F(!1, `private constructor; use ${r}from* methods`, "UNSUPPORTED_OPERATION", {
      operation: o
    });
  }
}
function At(n, e, t) {
  if (n instanceof Uint8Array)
    return n;
  if (typeof n == "string" && n.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {
    const r = new Uint8Array((n.length - 2) / 2);
    let o = 2;
    for (let a = 0; a < r.length; a++)
      r[a] = parseInt(n.substring(o, o + 2), 16), o += 2;
    return r;
  }
  h(!1, "invalid BytesLike value", e || "value", n);
}
function _(n, e) {
  return At(n, e);
}
function Y(n, e) {
  return !(typeof n != "string" || !n.match(/^0x[0-9A-Fa-f]*$/) || typeof e == "number" && n.length !== 2 + 2 * e || e === !0 && n.length % 2 !== 0);
}
const ee = "0123456789abcdef";
function v(n) {
  const e = _(n);
  let t = "0x";
  for (let r = 0; r < e.length; r++) {
    const o = e[r];
    t += ee[(o & 240) >> 4] + ee[o & 15];
  }
  return t;
}
function q(n) {
  return "0x" + n.map((e) => v(e).substring(2)).join("");
}
function te(n) {
  return Y(n, !0) ? (n.length - 2) / 2 : _(n).length;
}
function kt(n, e, t) {
  const r = _(n);
  F(e >= r.length, "padding exceeds data length", "BUFFER_OVERRUN", {
    buffer: new Uint8Array(r),
    length: e,
    offset: e + 1
  });
  const o = new Uint8Array(e);
  return o.fill(0), o.set(r, e - r.length), v(o);
}
function Ct(n, e) {
  return kt(n, e);
}
const ve = BigInt(0);
BigInt(1);
const K = 9007199254740991;
function z(n, e) {
  switch (typeof n) {
    case "bigint":
      return n;
    case "number":
      return h(Number.isInteger(n), "underflow", e || "value", n), h(n >= -9007199254740991 && n <= K, "overflow", e || "value", n), BigInt(n);
    case "string":
      try {
        if (n === "")
          throw new Error("empty string");
        return n[0] === "-" && n[1] !== "-" ? -BigInt(n.substring(1)) : BigInt(n);
      } catch (t) {
        h(!1, `invalid BigNumberish string: ${t.message}`, e || "value", n);
      }
  }
  h(!1, "invalid BigNumberish value", e || "value", n);
}
function It(n, e) {
  const t = z(n, e);
  return F(t >= ve, "unsigned value cannot be negative", "NUMERIC_FAULT", {
    fault: "overflow",
    operation: "getUint",
    value: n
  }), t;
}
function O(n, e) {
  switch (typeof n) {
    case "bigint":
      return h(n >= -9007199254740991 && n <= K, "overflow", e || "value", n), Number(n);
    case "number":
      return h(Number.isInteger(n), "underflow", e || "value", n), h(n >= -9007199254740991 && n <= K, "overflow", e || "value", n), n;
    case "string":
      try {
        if (n === "")
          throw new Error("empty string");
        return O(BigInt(n), e);
      } catch (t) {
        h(!1, `invalid numeric string: ${t.message}`, e || "value", n);
      }
  }
  h(!1, "invalid numeric value", e || "value", n);
}
function xt(n) {
  const e = It(n, "value");
  if (e === ve)
    return new Uint8Array([]);
  let t = e.toString(16);
  t.length % 2 && (t = "0" + t);
  const r = new Uint8Array(t.length / 2);
  for (let o = 0; o < r.length; o++) {
    const a = o * 2;
    r[o] = parseInt(t.substring(a, a + 2), 16);
  }
  return r;
}
function $(n, e) {
  h(typeof n == "string", "invalid string value", "str", n);
  let t = [];
  for (let r = 0; r < n.length; r++) {
    const o = n.charCodeAt(r);
    if (o < 128)
      t.push(o);
    else if (o < 2048)
      t.push(o >> 6 | 192), t.push(o & 63 | 128);
    else if ((o & 64512) == 55296) {
      r++;
      const a = n.charCodeAt(r);
      h(r < n.length && (a & 64512) === 56320, "invalid surrogate pair", "str", n);
      const i = 65536 + ((o & 1023) << 10) + (a & 1023);
      t.push(i >> 18 | 240), t.push(i >> 12 & 63 | 128), t.push(i >> 6 & 63 | 128), t.push(i & 63 | 128);
    } else
      t.push(o >> 12 | 224), t.push(o >> 6 & 63 | 128), t.push(o & 63 | 128);
  }
  return new Uint8Array(t);
}
function ne(n) {
  if (!Number.isSafeInteger(n) || n < 0)
    throw new Error(`Wrong positive integer: ${n}`);
}
function _e(n, ...e) {
  if (!(n instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (e.length > 0 && !e.includes(n.length))
    throw new Error(`Expected Uint8Array of length ${e}, not of length=${n.length}`);
}
function re(n, e = !0) {
  if (n.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e && n.finished)
    throw new Error("Hash#digest() has already been called");
}
function Et(n, e) {
  _e(n);
  const t = e.outputLen;
  if (n.length < t)
    throw new Error(`digestInto() expects output buffer of length at least ${t}`);
}
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Rt = (n) => n instanceof Uint8Array, St = (n) => new Uint32Array(n.buffer, n.byteOffset, Math.floor(n.byteLength / 4)), Pt = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!Pt)
  throw new Error("Non little-endian hardware is not supported");
function Mt(n) {
  if (typeof n != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof n}`);
  return new Uint8Array(new TextEncoder().encode(n));
}
function Ae(n) {
  if (typeof n == "string" && (n = Mt(n)), !Rt(n))
    throw new Error(`expected Uint8Array, got ${typeof n}`);
  return n;
}
class Nt {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
}
function Dt(n) {
  const e = (r) => n().update(Ae(r)).digest(), t = n();
  return e.outputLen = t.outputLen, e.blockLen = t.blockLen, e.create = () => n(), e;
}
const U = /* @__PURE__ */ BigInt(2 ** 32 - 1), oe = /* @__PURE__ */ BigInt(32);
function Bt(n, e = !1) {
  return e ? { h: Number(n & U), l: Number(n >> oe & U) } : { h: Number(n >> oe & U) | 0, l: Number(n & U) | 0 };
}
function zt(n, e = !1) {
  let t = new Uint32Array(n.length), r = new Uint32Array(n.length);
  for (let o = 0; o < n.length; o++) {
    const { h: a, l: i } = Bt(n[o], e);
    [t[o], r[o]] = [a, i];
  }
  return [t, r];
}
const Tt = (n, e, t) => n << t | e >>> 32 - t, jt = (n, e, t) => e << t | n >>> 32 - t, Ut = (n, e, t) => e << t - 32 | n >>> 64 - t, Lt = (n, e, t) => n << t - 32 | e >>> 64 - t, [ke, Ce, Ie] = [[], [], []], Ot = /* @__PURE__ */ BigInt(0), B = /* @__PURE__ */ BigInt(1), Ft = /* @__PURE__ */ BigInt(2), Qt = /* @__PURE__ */ BigInt(7), Wt = /* @__PURE__ */ BigInt(256), $t = /* @__PURE__ */ BigInt(113);
for (let n = 0, e = B, t = 1, r = 0; n < 24; n++) {
  [t, r] = [r, (2 * t + 3 * r) % 5], ke.push(2 * (5 * r + t)), Ce.push((n + 1) * (n + 2) / 2 % 64);
  let o = Ot;
  for (let a = 0; a < 7; a++)
    e = (e << B ^ (e >> Qt) * $t) % Wt, e & Ft && (o ^= B << (B << /* @__PURE__ */ BigInt(a)) - B);
  Ie.push(o);
}
const [Ht, Yt] = /* @__PURE__ */ zt(Ie, !0), ae = (n, e, t) => t > 32 ? Ut(n, e, t) : Tt(n, e, t), ie = (n, e, t) => t > 32 ? Lt(n, e, t) : jt(n, e, t);
function qt(n, e = 24) {
  const t = new Uint32Array(10);
  for (let r = 24 - e; r < 24; r++) {
    for (let i = 0; i < 10; i++)
      t[i] = n[i] ^ n[i + 10] ^ n[i + 20] ^ n[i + 30] ^ n[i + 40];
    for (let i = 0; i < 10; i += 2) {
      const s = (i + 8) % 10, d = (i + 2) % 10, p = t[d], c = t[d + 1], l = ae(p, c, 1) ^ t[s], g = ie(p, c, 1) ^ t[s + 1];
      for (let m = 0; m < 50; m += 10)
        n[i + m] ^= l, n[i + m + 1] ^= g;
    }
    let o = n[2], a = n[3];
    for (let i = 0; i < 24; i++) {
      const s = Ce[i], d = ae(o, a, s), p = ie(o, a, s), c = ke[i];
      o = n[c], a = n[c + 1], n[c] = d, n[c + 1] = p;
    }
    for (let i = 0; i < 50; i += 10) {
      for (let s = 0; s < 10; s++)
        t[s] = n[i + s];
      for (let s = 0; s < 10; s++)
        n[i + s] ^= ~t[(s + 2) % 10] & t[(s + 4) % 10];
    }
    n[0] ^= Ht[r], n[1] ^= Yt[r];
  }
  t.fill(0);
}
class V extends Nt {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(e, t, r, o = !1, a = 24) {
    if (super(), this.blockLen = e, this.suffix = t, this.outputLen = r, this.enableXOF = o, this.rounds = a, this.pos = 0, this.posOut = 0, this.finished = !1, this.destroyed = !1, ne(r), 0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200), this.state32 = St(this.state);
  }
  keccak() {
    qt(this.state32, this.rounds), this.posOut = 0, this.pos = 0;
  }
  update(e) {
    re(this);
    const { blockLen: t, state: r } = this;
    e = Ae(e);
    const o = e.length;
    for (let a = 0; a < o; ) {
      const i = Math.min(t - this.pos, o - a);
      for (let s = 0; s < i; s++)
        r[this.pos++] ^= e[a++];
      this.pos === t && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = !0;
    const { state: e, suffix: t, pos: r, blockLen: o } = this;
    e[r] ^= t, (t & 128) !== 0 && r === o - 1 && this.keccak(), e[o - 1] ^= 128, this.keccak();
  }
  writeInto(e) {
    re(this, !1), _e(e), this.finish();
    const t = this.state, { blockLen: r } = this;
    for (let o = 0, a = e.length; o < a; ) {
      this.posOut >= r && this.keccak();
      const i = Math.min(r - this.posOut, a - o);
      e.set(t.subarray(this.posOut, this.posOut + i), o), this.posOut += i, o += i;
    }
    return e;
  }
  xofInto(e) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(e);
  }
  xof(e) {
    return ne(e), this.xofInto(new Uint8Array(e));
  }
  digestInto(e) {
    if (Et(e, this), this.finished)
      throw new Error("digest() was already called");
    return this.writeInto(e), this.destroy(), e;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = !0, this.state.fill(0);
  }
  _cloneInto(e) {
    const { blockLen: t, suffix: r, outputLen: o, rounds: a, enableXOF: i } = this;
    return e || (e = new V(t, r, o, i, a)), e.state32.set(this.state32), e.pos = this.pos, e.posOut = this.posOut, e.finished = this.finished, e.rounds = a, e.suffix = r, e.outputLen = o, e.enableXOF = i, e.destroyed = this.destroyed, e;
  }
}
const Kt = (n, e, t) => Dt(() => new V(e, n, t)), Vt = /* @__PURE__ */ Kt(1, 136, 256 / 8);
let xe = !1;
const Ee = function(n) {
  return Vt(n);
};
let Re = Ee;
function j(n) {
  const e = _(n, "data");
  return v(Re(e));
}
j._ = Ee;
j.lock = function() {
  xe = !0;
};
j.register = function(n) {
  if (xe)
    throw new TypeError("keccak256 is locked");
  Re = n;
};
Object.freeze(j);
const se = "0x0000000000000000000000000000000000000000000000000000000000000000", Gt = `Ethereum Signed Message:
`, ce = BigInt(0), de = BigInt(1), pe = BigInt(2), le = BigInt(27), ge = BigInt(28), L = BigInt(35), M = {};
function me(n) {
  return Ct(xt(n), 32);
}
class w {
  #t;
  #n;
  #r;
  #e;
  /**
   *  The ``r`` value for a signature.
   *
   *  This represents the ``x`` coordinate of a "reference" or
   *  challenge point, from which the ``y`` can be computed.
   */
  get r() {
    return this.#t;
  }
  set r(e) {
    h(te(e) === 32, "invalid r", "value", e), this.#t = v(e);
  }
  /**
   *  The ``s`` value for a signature.
   */
  get s() {
    return this.#n;
  }
  set s(e) {
    h(te(e) === 32, "invalid s", "value", e);
    const t = v(e);
    h(parseInt(t.substring(0, 3)) < 8, "non-canonical s", "value", t), this.#n = t;
  }
  /**
   *  The ``v`` value for a signature.
   *
   *  Since a given ``x`` value for ``r`` has two possible values for
   *  its correspondin ``y``, the ``v`` indicates which of the two ``y``
   *  values to use.
   *
   *  It is normalized to the values ``27`` or ``28`` for legacy
   *  purposes.
   */
  get v() {
    return this.#r;
  }
  set v(e) {
    const t = O(e, "value");
    h(t === 27 || t === 28, "invalid v", "v", e), this.#r = t;
  }
  /**
   *  The EIP-155 ``v`` for legacy transactions. For non-legacy
   *  transactions, this value is ``null``.
   */
  get networkV() {
    return this.#e;
  }
  /**
   *  The chain ID for EIP-155 legacy transactions. For non-legacy
   *  transactions, this value is ``null``.
   */
  get legacyChainId() {
    const e = this.networkV;
    return e == null ? null : w.getChainId(e);
  }
  /**
   *  The ``yParity`` for the signature.
   *
   *  See ``v`` for more details on how this value is used.
   */
  get yParity() {
    return this.v === 27 ? 0 : 1;
  }
  /**
   *  The [[link-eip-2098]] compact representation of the ``yParity``
   *  and ``s`` compacted into a single ``bytes32``.
   */
  get yParityAndS() {
    const e = _(this.s);
    return this.yParity && (e[0] |= 128), v(e);
  }
  /**
   *  The [[link-eip-2098]] compact representation.
   */
  get compactSerialized() {
    return q([this.r, this.yParityAndS]);
  }
  /**
   *  The serialized representation.
   */
  get serialized() {
    return q([this.r, this.s, this.yParity ? "0x1c" : "0x1b"]);
  }
  /**
   *  @private
   */
  constructor(e, t, r, o) {
    _t(e, M, "Signature"), this.#t = t, this.#n = r, this.#r = o, this.#e = null;
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return `Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`;
  }
  /**
   *  Returns a new identical [[Signature]].
   */
  clone() {
    const e = new w(M, this.r, this.s, this.v);
    return this.networkV && (e.#e = this.networkV), e;
  }
  /**
   *  Returns a representation that is compatible with ``JSON.stringify``.
   */
  toJSON() {
    const e = this.networkV;
    return {
      _type: "signature",
      networkV: e != null ? e.toString() : null,
      r: this.r,
      s: this.s,
      v: this.v
    };
  }
  /**
   *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.
   *
   *  @example:
   *    Signature.getChainId(45)
   *    //_result:
   *
   *    Signature.getChainId(46)
   *    //_result:
   */
  static getChainId(e) {
    const t = z(e, "v");
    return t == le || t == ge ? ce : (h(t >= L, "invalid EIP-155 v", "v", e), (t - L) / pe);
  }
  /**
   *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.
   *
   *  Legacy transactions which use [[link-eip-155]] hijack the ``v``
   *  property to include the chain ID.
   *
   *  @example:
   *    Signature.getChainIdV(5, 27)
   *    //_result:
   *
   *    Signature.getChainIdV(5, 28)
   *    //_result:
   *
   */
  static getChainIdV(e, t) {
    return z(e) * pe + BigInt(35 + t - 27);
  }
  /**
   *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,
   *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.
   *
   *  @example:
   *    // The values 0 and 1 imply v is actually yParity
   *    Signature.getNormalizedV(0)
   *    //_result:
   *
   *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)
   *    Signature.getNormalizedV(27)
   *    //_result:
   *
   *    // Legacy EIP-155 transaction (i.e. >= 35)
   *    Signature.getNormalizedV(46)
   *    //_result:
   *
   *    // Invalid values throw
   *    Signature.getNormalizedV(5)
   *    //_error:
   */
  static getNormalizedV(e) {
    const t = z(e);
    return t === ce || t === le ? 27 : t === de || t === ge ? 28 : (h(t >= L, "invalid v", "v", e), t & de ? 27 : 28);
  }
  /**
   *  Creates a new [[Signature]].
   *
   *  If no %%sig%% is provided, a new [[Signature]] is created
   *  with default values.
   *
   *  If %%sig%% is a string, it is parsed.
   */
  static from(e) {
    function t(p, c) {
      h(p, c, "signature", e);
    }
    if (e == null)
      return new w(M, se, se, 27);
    if (typeof e == "string") {
      const p = _(e, "signature");
      if (p.length === 64) {
        const c = v(p.slice(0, 32)), l = p.slice(32, 64), g = l[0] & 128 ? 28 : 27;
        return l[0] &= 127, new w(M, c, v(l), g);
      }
      if (p.length === 65) {
        const c = v(p.slice(0, 32)), l = p.slice(32, 64);
        t((l[0] & 128) === 0, "non-canonical s");
        const g = w.getNormalizedV(p[64]);
        return new w(M, c, v(l), g);
      }
      t(!1, "invalid raw signature length");
    }
    if (e instanceof w)
      return e.clone();
    const r = e.r;
    t(r != null, "missing r");
    const o = me(r), a = function(p, c) {
      if (p != null)
        return me(p);
      if (c != null) {
        t(Y(c, 32), "invalid yParityAndS");
        const l = _(c);
        return l[0] &= 127, v(l);
      }
      t(!1, "missing s");
    }(e.s, e.yParityAndS);
    t((_(a)[0] & 128) == 0, "non-canonical s");
    const { networkV: i, v: s } = function(p, c, l) {
      if (p != null) {
        const g = z(p);
        return {
          networkV: g >= L ? g : void 0,
          v: w.getNormalizedV(g)
        };
      }
      if (c != null)
        return t(Y(c, 32), "invalid yParityAndS"), { v: _(c)[0] & 128 ? 28 : 27 };
      if (l != null) {
        switch (O(l, "sig.yParity")) {
          case 0:
            return { v: 27 };
          case 1:
            return { v: 28 };
        }
        t(!1, "invalid yParity");
      }
      t(!1, "missing v");
    }(e.v, e.yParityAndS, e.yParity), d = new w(M, o, a, s);
    return i && (d.#e = i), t(e.yParity == null || O(e.yParity, "sig.yParity") === d.yParity, "yParity mismatch"), t(e.yParityAndS == null || e.yParityAndS === d.yParityAndS, "yParityAndS mismatch"), d;
  }
}
function Jt(n) {
  return typeof n == "string" && (n = $(n)), j(q([
    $(Gt),
    $(String(n.length)),
    n
  ]));
}
class dn {
  constructor(e, t, r) {
    this.turnkeyIframeClient = e, this.account = t, this.organizationId = r;
  }
  type = "turnkey";
  platform = "ethereum";
  account = void 0;
  organizationId = void 0;
  isAvailable() {
    return typeof window < "u";
  }
  getInfo() {
    const e = this.isAvailable();
    return {
      type: this.type,
      available: e,
      name: "Turnkey",
      platform: this.platform
    };
  }
  async connect() {
    if (this.account)
      return { success: !0, wallet: this.type, account: this.account };
    try {
      if (!this.isAvailable())
        throw new Error("Turnkey is not available");
      const e = await this.turnkeyIframeClient.getWallets();
      if (e && e.wallets.length > 0) {
        const t = await this.turnkeyIframeClient.getWalletAccount({
          walletId: e.wallets[0].walletId
        });
        return this.account = t.account.address, { success: !0, wallet: this.type, account: this.account };
      }
      throw new Error("No accounts found");
    } catch (e) {
      return console.error("Error connecting to Turnkey:", e), {
        success: !1,
        wallet: this.type,
        error: e.message || "Unknown error"
      };
    }
  }
  getConnectedAccounts() {
    return this.account ? [this.account] : [];
  }
  async signTransaction(e) {
    try {
      if (!this.isAvailable() || !this.account)
        throw new Error("Turnkey is not connected");
      const t = (await this.turnkeyIframeClient.signTransaction({
        organizationId: this.organizationId,
        signWith: this.account,
        unsignedTransaction: e,
        type: "TRANSACTION_TYPE_ETHEREUM"
      })).signedTransaction;
      return { success: !0, wallet: this.type, result: t };
    } catch (t) {
      return console.error("Error signing transaction with Turnkey:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
  async signMessage(e) {
    try {
      if (!this.isAvailable() || !this.account)
        throw new Error("Turnkey is not connected");
      const t = `0x${e.replace("0x", "").padStart(64, "0")}`, r = _(t), o = Jt(r), { r: a, s: i, v: s } = await this.turnkeyIframeClient.signRawPayload({
        organizationId: this.organizationId,
        signWith: this.account,
        payload: o,
        encoding: "PAYLOAD_ENCODING_HEXADECIMAL",
        hashFunction: "HASH_FUNCTION_NO_OP"
      }), d = a.startsWith("0x") ? a : "0x" + a, p = i.startsWith("0x") ? i : "0x" + i, c = parseInt(s, 16);
      if (isNaN(c))
        throw console.error(`Invalid recovery ID (v) received from Turnkey: ${s}`), new Error(`Invalid recovery ID (v) received: ${s}`);
      const l = w.from({
        r: d,
        s: p,
        v: c
      });
      return {
        success: !0,
        wallet: this.type,
        result: l.serialized,
        account: this.account
      };
    } catch (t) {
      return console.error("Error signing message with Turnkey:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
  async signTypedData(e) {
    return this.signMessage(e);
  }
  async sendTransaction(e) {
    return {
      success: !1,
      wallet: this.type,
      error: "Not implemented"
    };
  }
  async switchChain(e) {
    return !1;
  }
  async getBalance(e) {
    try {
      if (!this.isAvailable() || !this.account)
        throw new Error("Turnkey is not connected");
      return e ? {
        success: !1,
        wallet: this.type,
        error: "Not implemented for ERC20"
      } : { success: !0, wallet: this.type, result: "0" };
    } catch (t) {
      return console.error("Error getting balance from Turnkey:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
}
class pn {
  constructor(e, t) {
    this.provider = e, this.account = t?.toLowerCase();
  }
  type = "walletconnect";
  platform = "ethereum";
  account = void 0;
  getConnectedAccounts() {
    return this.account ? [this.account] : [];
  }
  isAvailable() {
    return !!this.provider;
  }
  getInfo() {
    const e = this.isAvailable();
    return {
      type: this.type,
      available: e,
      version: e ? window.ethereum?.version || "Unknown" : void 0,
      chainId: e ? window.ethereum?.chainId : void 0,
      name: "WalletConnect",
      platform: this.platform
    };
  }
  async connect() {
    if (this.account)
      return { success: !0, wallet: this.type, account: this.account };
    try {
      if (!this.isAvailable())
        throw new Error("WalletConnect is not available");
      const e = await this.provider.request({
        method: "eth_requestAccounts"
      });
      if (e && e.length > 0)
        return this.account = e[0], { success: !0, wallet: this.type, account: this.account };
      throw new Error("No accounts found");
    } catch (e) {
      return console.error("Error connecting to WalletConnect:", e), {
        success: !1,
        wallet: this.type,
        error: e.message || "Unknown error"
      };
    }
  }
  async signTransaction(e) {
    try {
      if (!this.isAvailable() || !this.account)
        throw new Error("WalletConnect is not connected");
      const t = await this.provider.request({
        method: "eth_sendTransaction",
        params: [e]
      });
      return { success: !0, wallet: this.type, result: t };
    } catch (t) {
      return console.error("Error signing transaction with WalletConnect:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
  async signMessage(e) {
    try {
      if (!this.isAvailable() || !this.account)
        throw new Error("WalletConnect is not connected");
      const t = await this.provider.request({
        method: "personal_sign",
        params: [e, this.account]
      });
      return { success: !0, wallet: this.type, result: t };
    } catch (t) {
      return console.error("Error signing message with WalletConnect:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
  async signTypedData(e) {
    try {
      if (!this.isAvailable() || !this.account)
        throw new Error("WalletConnect is not connected");
      const t = await this.provider.request({
        method: "eth_signTypedData_v4",
        params: [this.account, JSON.stringify(e)]
      });
      return { success: !0, wallet: this.type, result: t };
    } catch (t) {
      return console.error("Error signing typed data with WalletConnect:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
  async sendTransaction(e) {
    return {
      success: !1,
      wallet: this.type,
      error: "Not implemented"
    };
  }
  async switchChain(e) {
    try {
      if (!this.isAvailable())
        throw new Error("WalletConnect is not available");
      try {
        return await this.provider.request({
          method: "wallet_switchEthereumChain",
          params: [{ chainId: e }]
        }), !0;
      } catch (t) {
        throw t.code === 4902 && console.warn("Chain not added to WalletConnect"), t;
      }
    } catch (t) {
      return console.error("Error switching chain for WalletConnect:", t), !1;
    }
  }
  async getBalance(e) {
    try {
      if (!this.isAvailable() || !this.account)
        throw new Error("WalletConnect is not connected");
      if (e)
        return {
          success: !1,
          wallet: this.type,
          error: "Not implemented for ERC20"
        };
      {
        const t = await this.provider.request({
          method: "eth_getBalance",
          params: [this.account, "latest"]
        });
        return { success: !0, wallet: this.type, result: t };
      }
    } catch (t) {
      return console.error("Error getting balance from WalletConnect:", t), {
        success: !1,
        wallet: this.type,
        error: t.message || "Unknown error"
      };
    }
  }
}
var Se = {
  "blob-arena": {
    origin: ["*.blobarena.xyz", "blobarena.xyz", "development.blobarena.xyz"],
    theme: {
      colors: {
        primary: "#980f06"
      },
      cover: "https://static.cartridge.gg/presets/blob-arena/cover.png",
      icon: "https://static.cartridge.gg/presets/blob-arena/icon.png",
      name: "Blob Arena",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    },
    chains: {
      SN_SEPOLIA: {
        policies: {
          contracts: {
            "0x771a2807aa479dacd207c1f12018d0fa6e92ef1eb994169ff4f8904a8845e3f": {
              name: "Lobby Contract",
              description: "Game invites and responses",
              methods: [
                {
                  name: "Send Invite",
                  entrypoint: "send_invite",
                  description: "Send users an invite"
                },
                {
                  name: "Rescind Invite",
                  entrypoint: "rescind_invite",
                  description: "Rescind a previously sent invite"
                },
                {
                  name: "Respond Invite",
                  entrypoint: "respond_invite",
                  description: "Respond to a received invite"
                },
                {
                  name: "Rescind Response",
                  entrypoint: "rescind_response",
                  description: "Rescind a previous response to an invite"
                },
                {
                  name: "Reject Invite",
                  entrypoint: "reject_invite",
                  description: "Reject a received invite"
                },
                {
                  name: "Reject Response",
                  entrypoint: "reject_response",
                  description: "Reject a response to an invite"
                },
                {
                  name: "Accept Response",
                  entrypoint: "accept_response",
                  description: "Accept a response to an invite"
                }
              ]
            },
            "0x6040ee8b2aee6cbcc482b5cb712d1c206f8ad070e98d7e07a70d4e4a6b5e261": {
              name: "PVP Contract",
              description: "Manages core gameplay interactions",
              methods: [
                {
                  name: "Start Game",
                  entrypoint: "start",
                  description: "Start the game"
                },
                {
                  name: "Commit Attack",
                  entrypoint: "commit",
                  description: "Commit an attack in the game"
                },
                {
                  name: "Reveal Attack",
                  entrypoint: "reveal",
                  description: "Reveal the committed attack in the game"
                },
                {
                  name: "Run Round",
                  entrypoint: "run",
                  description: "Run the next round of the game"
                },
                {
                  name: "Forfeit",
                  entrypoint: "forfeit",
                  description: "Forfeit the game"
                },
                {
                  name: "Kick Player",
                  entrypoint: "kick_player",
                  description: "Kick an inactive player from the game"
                }
              ]
            },
            "0x69f9cd86938bae98a413c2b4dddee1ab8005d72202466ef4fd35a625596e619": {
              name: "Betsy Contract",
              description: "Wager operations",
              methods: [
                {
                  name: "Set Owner's Fee",
                  entrypoint: "set_owners_fee",
                  description: "Set the owner's fee"
                },
                {
                  name: "Create Wager",
                  entrypoint: "create",
                  description: "Create a wager"
                },
                {
                  name: "Accept Wager",
                  entrypoint: "accept",
                  description: "Accept a wager"
                },
                {
                  name: "Reject Wager",
                  entrypoint: "reject",
                  description: "Reject a wager"
                },
                {
                  name: "Revoke Wager",
                  entrypoint: "revoke",
                  description: "Revoke a wager"
                },
                {
                  name: "Claim Win",
                  entrypoint: "claim_win",
                  description: "Claim the win"
                },
                {
                  name: "Approve Release",
                  entrypoint: "approve_release",
                  description: "Approve fund release"
                },
                {
                  name: "Revoke Release",
                  entrypoint: "revoke_release",
                  description: "Revoke fund release"
                },
                {
                  name: "Release Funds",
                  entrypoint: "release_funds",
                  description: "Release funds"
                }
              ]
            },
            "0x11088b79a397c2fb9d2570acbf711e6972e75e3a28b6bcf36267501d96c781b": {
              name: "Arcade Contract",
              description: "Minting of arcade Bloberts",
              methods: [
                {
                  name: "Mint Arcade Blobert",
                  entrypoint: "mint",
                  description: "Mint arcade blobert"
                }
              ]
            },
            "0x645aec04e61f286691b91d6589d010890bb66ca0af91bf24d12c8bc4387c868": {
              name: "AMMA Contract",
              description: "Minting of AMMA Bloberts",
              methods: [
                {
                  name: "Mint AMMA Blobert",
                  entrypoint: "mint",
                  description: "Mint AMMA blobert"
                }
              ]
            },
            "0x1ad613db1957a576c1a9bae913f1d22a41add2f1d64d822d9e097f219b34954": {
              name: "Arcade Contract",
              description: "Arcade mode contract",
              methods: [
                {
                  name: "Start Game",
                  entrypoint: "start_game",
                  description: "Start the game"
                },
                {
                  name: "Attack",
                  entrypoint: "attack",
                  description: "Submit an attack"
                },
                {
                  name: "Start Challenge",
                  entrypoint: "start_challenge",
                  description: "Start a challenge"
                },
                {
                  name: "Next Challenge Round",
                  entrypoint: "next_challenge_round",
                  description: "Go forward"
                },
                {
                  name: "Respawn Challenge",
                  entrypoint: "respawn_challenge",
                  description: "Restart a challenge"
                },
                {
                  name: "End Challenge",
                  entrypoint: "end_challenge",
                  description: "End a challenge"
                },
                {
                  name: "Claim Free Game",
                  entrypoint: "claim_free_game",
                  description: "Claim an arcade game"
                }
              ]
            }
          }
        }
      }
    }
  },
  "blob-arena-amma": {
    origin: ["*.blobarena.xyz", "blobarena.xyz", "development.blobarena.xyz"],
    theme: {
      colors: {
        primary: "#D7B000"
      },
      cover: "https://static.cartridge.gg/presets/blob-arena-amma/cover.png",
      icon: "https://static.cartridge.gg/presets/blob-arena-amma/icon.png",
      name: "Blob Arena AMMA",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    },
    chains: {
      SN_SEPOLIA: {
        policies: {
          contracts: {
            "0x771a2807aa479dacd207c1f12018d0fa6e92ef1eb994169ff4f8904a8845e3f": {
              name: "Lobby Contract",
              description: "Game invites and responses",
              methods: [
                {
                  name: "Send Invite",
                  entrypoint: "send_invite",
                  description: "Send users an invite"
                },
                {
                  name: "Rescind Invite",
                  entrypoint: "rescind_invite",
                  description: "Rescind a previously sent invite"
                },
                {
                  name: "Respond Invite",
                  entrypoint: "respond_invite",
                  description: "Respond to a received invite"
                },
                {
                  name: "Rescind Response",
                  entrypoint: "rescind_response",
                  description: "Rescind a previous response to an invite"
                },
                {
                  name: "Reject Invite",
                  entrypoint: "reject_invite",
                  description: "Reject a received invite"
                },
                {
                  name: "Reject Response",
                  entrypoint: "reject_response",
                  description: "Reject a response to an invite"
                },
                {
                  name: "Accept Response",
                  entrypoint: "accept_response",
                  description: "Accept a response to an invite"
                }
              ]
            },
            "0x6040ee8b2aee6cbcc482b5cb712d1c206f8ad070e98d7e07a70d4e4a6b5e261": {
              name: "PVP Contract",
              description: "Manages core gameplay interactions",
              methods: [
                {
                  name: "Start Game",
                  entrypoint: "start",
                  description: "Start the game"
                },
                {
                  name: "Commit Attack",
                  entrypoint: "commit",
                  description: "Commit an attack in the game"
                },
                {
                  name: "Reveal Attack",
                  entrypoint: "reveal",
                  description: "Reveal the committed attack in the game"
                },
                {
                  name: "Run Round",
                  entrypoint: "run",
                  description: "Run the next round of the game"
                },
                {
                  name: "Forfeit",
                  entrypoint: "forfeit",
                  description: "Forfeit the game"
                },
                {
                  name: "Kick Player",
                  entrypoint: "kick_player",
                  description: "Kick an inactive player from the game"
                }
              ]
            },
            "0x69f9cd86938bae98a413c2b4dddee1ab8005d72202466ef4fd35a625596e619": {
              name: "Betsy Contract",
              description: "Wager operations",
              methods: [
                {
                  name: "Set Owner's Fee",
                  entrypoint: "set_owners_fee",
                  description: "Set the owner's fee"
                },
                {
                  name: "Create Wager",
                  entrypoint: "create",
                  description: "Create a wager"
                },
                {
                  name: "Accept Wager",
                  entrypoint: "accept",
                  description: "Accept a wager"
                },
                {
                  name: "Reject Wager",
                  entrypoint: "reject",
                  description: "Reject a wager"
                },
                {
                  name: "Revoke Wager",
                  entrypoint: "revoke",
                  description: "Revoke a wager"
                },
                {
                  name: "Claim Win",
                  entrypoint: "claim_win",
                  description: "Claim the win"
                },
                {
                  name: "Approve Release",
                  entrypoint: "approve_release",
                  description: "Approve fund release"
                },
                {
                  name: "Revoke Release",
                  entrypoint: "revoke_release",
                  description: "Revoke fund release"
                },
                {
                  name: "Release Funds",
                  entrypoint: "release_funds",
                  description: "Release funds"
                }
              ]
            },
            "0x11088b79a397c2fb9d2570acbf711e6972e75e3a28b6bcf36267501d96c781b": {
              name: "Arcade Contract",
              description: "Minting of arcade Bloberts",
              methods: [
                {
                  name: "Mint Arcade Blobert",
                  entrypoint: "mint",
                  description: "Mint arcade blobert"
                }
              ]
            },
            "0x645aec04e61f286691b91d6589d010890bb66ca0af91bf24d12c8bc4387c868": {
              name: "AMMA Contract",
              description: "Minting of AMMA Bloberts",
              methods: [
                {
                  name: "Mint AMMA Blobert",
                  entrypoint: "mint",
                  description: "Mint AMMA blobert"
                }
              ]
            },
            "0x1ad613db1957a576c1a9bae913f1d22a41add2f1d64d822d9e097f219b34954": {
              name: "Arcade Contract",
              description: "Arcade mode contract",
              methods: [
                {
                  name: "Start Game",
                  entrypoint: "start_game",
                  description: "Start the game"
                },
                {
                  name: "Attack",
                  entrypoint: "attack",
                  description: "Submit an attack"
                },
                {
                  name: "Start Challenge",
                  entrypoint: "start_challenge",
                  description: "Start a challenge"
                },
                {
                  name: "Next Challenge Round",
                  entrypoint: "next_challenge_round",
                  description: "Go forward"
                },
                {
                  name: "Respawn Challenge",
                  entrypoint: "respawn_challenge",
                  description: "Restart a challenge"
                },
                {
                  name: "End Challenge",
                  entrypoint: "end_challenge",
                  description: "End a challenge"
                },
                {
                  name: "Claim Free Game",
                  entrypoint: "claim_free_game",
                  description: "Claim an arcade game"
                }
              ]
            }
          }
        }
      }
    }
  },
  budokan: {
    origin: "budokan.gg",
    chains: {
      SN_MAIN: {
        policies: {
          contracts: {
            "0x05fb427962210ac4b3be5e23419b0d9e91ca6a9c57b0665d2ca7783092506f6e": {
              name: "Budokan",
              methods: [
                {
                  entrypoint: "create_tournament"
                },
                {
                  entrypoint: "enter_tournament"
                },
                {
                  entrypoint: "submit_score"
                },
                {
                  entrypoint: "claim_prize"
                },
                {
                  entrypoint: "add_prize"
                },
                {
                  entrypoint: "register_token"
                }
              ]
            }
          }
        }
      }
    },
    theme: {
      colors: {
        primary: "#B1B97A"
      },
      cover: "https://static.cartridge.gg/presets/budokan/cover.png",
      icon: "https://static.cartridge.gg/presets/budokan/icon.png",
      name: "Budokan",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    }
  },
  "bytebeasts-tamagotchi": {
    origin: "bytebeasts.games",
    theme: {
      colors: {
        primary: "#ECECDA"
      },
      cover: "https://static.cartridge.gg/presets/bytebeasts-tamagotchi/cover.png",
      icon: "https://static.cartridge.gg/presets/bytebeasts-tamagotchi/icon.png",
      name: "Tamagotchi",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    }
  },
  cartridge: {
    origin: "*",
    theme: {
      name: "Cartridge",
      icon: "https://static.cartridge.gg/presets/cartridge/icon.svg",
      cover: {
        light: "https://static.cartridge.gg/presets/cartridge/cover-light.png",
        dark: "https://static.cartridge.gg/presets/cartridge/cover-dark.png"
      },
      optimizedCover: {
        light: {
          webp: {
            768: "cover-light@768.webp",
            1024: "cover-light@1024.webp",
            1440: "cover-light@1440.webp"
          },
          jpg: {
            768: "cover-light@768.jpg",
            1024: "cover-light@1024.jpg",
            1440: "cover-light@1440.jpg"
          },
          png: {
            768: "cover-light@768.png",
            1024: "cover-light@1024.png",
            1440: "cover-light@1440.png"
          }
        },
        dark: {
          webp: {
            768: "cover-dark@768.webp",
            1024: "cover-dark@1024.webp",
            1440: "cover-dark@1440.webp"
          },
          jpg: {
            768: "cover-dark@768.jpg",
            1024: "cover-dark@1024.jpg",
            1440: "cover-dark@1440.jpg"
          },
          png: {
            768: "cover-dark@768.png",
            1024: "cover-dark@1024.png",
            1440: "cover-dark@1440.png"
          }
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        },
        svg: {
          16: "icon@16.svg",
          32: "icon@32.svg",
          64: "icon@64.svg",
          128: "icon@128.svg",
          256: "icon@256.svg"
        }
      }
    }
  },
  coloniz: {
    origin: ["coloniz.xyz"],
    chains: {
      SN_MAIN: {
        policies: {
          contracts: {
            "0x430d7262fb9ad2c830d793471c3a07e08afe54f9a5f0d28db48712bc918f5f": {
              name: "Tokenbound Sessions",
              methods: [
                {
                  name: "Execute",
                  entrypoint: "execute",
                  description: "Session proxy"
                }
              ]
            },
            "0x56977e22ad4751ea5b3df958da3080971c7f26036127452b98c154fbea86d06": {
              name: "Profile Creation",
              methods: [
                {
                  name: "Create A Coloniz Profile",
                  entrypoint: "create_profile",
                  description: "Create a profile on Coloniz"
                }
              ]
            },
            "0x5cc4644374e3f91b52cfe64937dacaec91b2d81fe2f146a860ab5b3bb751ce8": {
              name: "Handles Minting",
              methods: [
                {
                  name: "Mint Handle",
                  entrypoint: "mint_handle",
                  description: "Mint Coloniz Profile Handle"
                }
              ]
            },
            "0x79914426e3cc5336c479ee87770380ceeda4b60496657e70c3ee7d57a992226": {
              name: "Handle Registry",
              methods: [
                {
                  name: "Link Handle",
                  entrypoint: "link",
                  description: "Link handle to Coloniz Profile"
                }
              ]
            }
          },
          messages: [
            {
              name: "Sign in to Coloniz",
              description: "Sign the message to login to Coloniz",
              types: {
                StarknetDomain: [
                  {
                    name: "name",
                    type: "shortstring"
                  },
                  {
                    name: "version",
                    type: "shortstring"
                  },
                  {
                    name: "chainId",
                    type: "shortstring"
                  },
                  {
                    name: "revision",
                    type: "shortstring"
                  }
                ],
                Signin: [
                  {
                    name: "content",
                    type: "string"
                  },
                  {
                    name: "nonce",
                    type: "string"
                  },
                  {
                    name: "timestamp",
                    type: "string"
                  }
                ]
              },
              primaryType: "Signin",
              domain: {
                name: "Coloniz",
                version: "1",
                revision: "1",
                chainId: "SN_MAIN"
              }
            }
          ]
        }
      }
    },
    theme: {
      colors: {
        primary: "#4285F4"
      },
      cover: "https://static.cartridge.gg/presets/coloniz/cover.png",
      icon: "https://static.cartridge.gg/presets/coloniz/icon.png",
      name: "Coloniz",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    }
  },
  credit: {
    origin: "*",
    theme: {
      name: "Credit",
      icon: "https://static.cartridge.gg/presets/credit/icon.svg",
      cover: "https://static.cartridge.gg/presets/credit/cover.png",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        },
        svg: {
          16: "icon@16.svg",
          32: "icon@32.svg",
          64: "icon@64.svg",
          128: "icon@128.svg",
          256: "icon@256.svg"
        }
      }
    }
  },
  "dark-shuffle": {
    origin: ["darkshuffle.io", "darkshuffle.dev"],
    theme: {
      colors: {
        primary: "#F59100"
      },
      cover: "https://static.cartridge.gg/presets/dark-shuffle/cover.png",
      icon: "https://static.cartridge.gg/presets/dark-shuffle/icon.svg",
      name: "Dark Shuffle",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        },
        svg: {
          16: "icon@16.svg",
          32: "icon@32.svg",
          64: "icon@64.svg",
          128: "icon@128.svg",
          256: "icon@256.svg"
        }
      }
    },
    chains: {
      SN_MAIN: {
        policies: {
          contracts: {
            "0x051Fea4450Da9D6aeE758BDEbA88B2f665bCbf549D2C61421AA724E9AC0Ced8F": {
              name: "VRF Provider",
              description: "Provides verifiable random functions",
              methods: [
                {
                  name: "Request Random",
                  description: "Request a random number",
                  entrypoint: "request_random"
                }
              ]
            },
            "0x0444834e7b71749832f0db8c64f17ed1c3af8462c1682c10dcd6068b1c57494b": {
              name: "game_systems",
              description: "Game mechanics",
              methods: [
                {
                  entrypoint: "mint"
                },
                {
                  entrypoint: "start_game"
                },
                {
                  entrypoint: "pick_card"
                },
                {
                  entrypoint: "generate_tree"
                },
                {
                  entrypoint: "select_node"
                }
              ]
            },
            "0x06633dc0c8e3956fd8d87f68e5a4324cb20270b442a532f4d4179d85c389b324": {
              name: "battle_systems",
              description: "Battle mechanics",
              methods: [
                {
                  entrypoint: "battle_actions"
                }
              ]
            }
          }
        }
      }
    }
  },
  dominion: {
    origin: "https://dominion.fun",
    theme: {
      colors: {
        primary: "#19cfff"
      },
      cover: "https://static.cartridge.gg/presets/dominion/cover.png",
      icon: "https://static.cartridge.gg/presets/dominion/icon.svg",
      name: "Dominion",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        },
        svg: {
          16: "icon@16.svg",
          32: "icon@32.svg",
          64: "icon@64.svg",
          128: "icon@128.svg",
          256: "icon@256.svg"
        }
      }
    }
  },
  "dope-wars": {
    origin: "dopewars.game",
    chains: {
      SN_MAIN: {
        policies: {
          contracts: {
            "0x051Fea4450Da9D6aeE758BDEbA88B2f665bCbf549D2C61421AA724E9AC0Ced8F": {
              name: "VRF Provider",
              description: "Provides verifiable random functions",
              methods: [
                {
                  name: "Request Random",
                  description: "Request a random number",
                  entrypoint: "request_random"
                }
              ]
            },
            "0x0410466536b5ae074f7fea81e5533b8134a9fa08b3dd077dd9db08f64997d113": {
              name: "Paper Token",
              description: "Manages paper approvals",
              methods: [
                {
                  name: "Approve",
                  description: "Approve paper usage",
                  entrypoint: "approve"
                }
              ]
            },
            "0x044a23BbfE03FFe90D3C23Fb6e5A8AD0341036C039363DfA6F3513278Aa51fCA": {
              name: "Game Contract",
              description: "Core game mechanics",
              methods: [
                {
                  name: "Create Game",
                  description: "Start a new game",
                  entrypoint: "create_game"
                },
                {
                  name: "Travel",
                  description: "Travel to a new location",
                  entrypoint: "travel"
                },
                {
                  name: "Decide",
                  description: "Make a game decision",
                  entrypoint: "decide"
                },
                {
                  name: "End Game",
                  description: "End the current game",
                  entrypoint: "end_game"
                }
              ]
            },
            "0x0412445e644070C69fEa16b964cC81Cd6dEBF6A4DBf683E2E9686a45ad088de8": {
              name: "Laundromat Contract",
              description: "Manages game scoring and laundering",
              methods: [
                {
                  name: "Register Score",
                  description: "Register a game score",
                  entrypoint: "register_score"
                },
                {
                  name: "Claim",
                  description: "Claim rewards",
                  entrypoint: "claim"
                },
                {
                  name: "Launder",
                  description: "Launder resources",
                  entrypoint: "launder"
                }
              ]
            }
          }
        }
      }
    },
    theme: {
      colors: {
        primary: "#11ED83"
      },
      cover: "https://static.cartridge.gg/presets/dope-wars/cover.png",
      icon: "https://static.cartridge.gg/presets/dope-wars/icon.png",
      name: "Dope Wars",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    }
  },
  dragark: {
    origin: ["*.dragark.net", "dragark.net"],
    chains: {
      SN_MAIN: {
        policies: {
          contracts: {
            "0x05553fcb6da57decacce3306d8e0b3bf65b656dceda96c90ba55bde8980253ce": {
              name: "Achievement Systems",
              description: "Allows you to interact with achievement features.",
              methods: [
                {
                  name: "Claim Achievement Reward",
                  description: "A method to claim your achievement reward.",
                  entrypoint: "claim_achievement_reward"
                }
              ]
            },
            "0x059ffaee1d7068332ea8f084a9685b99a5c2a74197ef99e093a10fa25f887402": {
              name: "Dragon Systems",
              description: "Allows you to interact with dragon features.",
              methods: [
                {
                  name: "Activate Dragon",
                  description: "A method to activate the Dragark NFT into the game.",
                  entrypoint: "activate_dragon"
                },
                {
                  name: "Deactivate Dragon",
                  description: "A method to deactivate Dragark NFT out of the game.",
                  entrypoint: "deactivate_dragon"
                },
                {
                  name: "Upgrade Dragon",
                  description: "A method to upgrade the Dragark's level.",
                  entrypoint: "upgrade_dragon"
                }
              ]
            },
            "0x0760d029c7b49069ece425285afb592152da1fff59038e697a5554f1b94150f2": {
              name: "Island Systems",
              description: "Allows you to interact with island features.",
              methods: [
                {
                  name: "Claim Resources",
                  description: "A method to claim the island's rescources.",
                  entrypoint: "claim_resources"
                },
                {
                  name: "Claim Resources Islands",
                  description: "A method to claim rescources on multiple islands.",
                  entrypoint: "claim_resources_islands"
                }
              ]
            },
            "0x000ccb9e596c7d3298b670d91b6c3ed305aeed3eb1335d702265f53f1d0ad68a": {
              name: "Journey Systems",
              description: "Allows you to interact with journey features.",
              methods: [
                {
                  name: "Start Journey",
                  description: "A method to start a new journey to other island.",
                  entrypoint: "start_journey"
                },
                {
                  name: "Finish Journey",
                  description: "A method to finish a started journey.",
                  entrypoint: "finish_journey"
                }
              ]
            },
            "0x0002d12498d7b7f5e4d57a9895f8684fa58f4edb06ba6edb879723d8acb16507": {
              name: "Map Systems",
              description: "Allows you to interact with map features.",
              methods: [
                {
                  name: "Join Map",
                  description: "A method to join the map.",
                  entrypoint: "join_map"
                }
              ]
            },
            "0x01ba78267fd97db89b8ac0316ce0a2d71aaef87ad4f300e5468dc20232a2ff20": {
              name: "Mission Systems",
              description: "Allows you to interact with mission features.",
              methods: [
                {
                  name: "Claim Mission Reward",
                  description: "A method to claim your mission reward.",
                  entrypoint: "claim_mission_reward"
                }
              ]
            },
            "0x063b168f01cbac52b5d2ad82696eeaddde33b38d24364523ad0a3ca400361489": {
              name: "Player Systems",
              description: "Allows you to interact with player features.",
              methods: [
                {
                  name: "Buy Energy",
                  description: "A method to buy energy used in scouting the map.",
                  entrypoint: "buy_energy"
                },
                {
                  name: "Claim Reward",
                  description: "A method to claim your reward.",
                  entrypoint: "claim_reward"
                },
                {
                  name: "Upgrade Account Level",
                  description: "A method to upgrade your account level.",
                  entrypoint: "upgrade_account_level"
                },
                {
                  name: "Upgrade Invitation Level",
                  description: "A method to upgrade your invitation level.",
                  entrypoint: "upgrade_invitation_level"
                },
                {
                  name: "Redeem Invite Code",
                  description: "A method to redeem invite code.",
                  entrypoint: "redeem_invite_code"
                },
                {
                  name: "Claim Pool Share Reward",
                  description: "A method to claim your Pool Share reward.",
                  entrypoint: "claim_pool_share_reward"
                }
              ]
            },
            "0x03284bb4684703a368db8fd538c39b30e51822dbab9ad398e66311e820318444": {
              name: "Scout Systems",
              description: "Allows you to interact with scout features.",
              methods: [
                {
                  name: "Scout",
                  description: "A method to scout the map.",
                  entrypoint: "scout"
                }
              ]
            },
            "0x04a8b7e4106719e75653595c1e55da9ac88fbf1ae29124fca325c0537f00e908": {
              name: "Shield Systems",
              description: "Allows you to interact with shield features.",
              methods: [
                {
                  name: "Activate Shield",
                  description: "A method to activate a shield to protect your island.",
                  entrypoint: "activate_shield"
                },
                {
                  name: "Deactivate Shield",
                  description: "A method to deactivate a shield from your island.",
                  entrypoint: "deactivate_shield"
                },
                {
                  name: "Buy Shield",
                  description: "A method to buy a shield.",
                  entrypoint: "buy_shield"
                }
              ]
            },
            "0x060a67334aed80a5403bd2b727337f29ccdcbf51784cc7ddb73f10ceb92e61f1": {
              name: "Star Shop Systems",
              description: "Allows you to interact with star shop features.",
              methods: [
                {
                  name: "Buy Item Star Shop",
                  description: "A method to buy item from the Star Shop.",
                  entrypoint: "buy_item_star_shop"
                }
              ]
            },
            "0x0655a9a38cb8dd7087a206b7d885528f8994e03dd6449105ef0f068caa502d25": {
              name: "Treasure Hunt Systems",
              description: "Allows you to interact with treasure hunt features.",
              methods: [
                {
                  name: "Insert Dragon Treasure Hunt",
                  description: "A method to insert your Dragarks to start a new treasure hunt.",
                  entrypoint: "insert_dragon_treasure_hunt"
                },
                {
                  name: "End Treasure Hunt",
                  description: "A method to end an existing treasure hunt and claim rewards.",
                  entrypoint: "end_treasure_hunt"
                }
              ]
            }
          }
        }
      }
    },
    theme: {
      colors: {
        primary: "#71EB34"
      },
      cover: "https://static.cartridge.gg/presets/dragark/cover.png",
      icon: "https://static.cartridge.gg/presets/dragark/icon.png",
      name: "Dragark",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    }
  },
  eternum: {
    origin: ["eternum.realms.world", "empire.realms.world"],
    chains: {
      SN_MAIN: {
        policies: {
          contracts: {
            "0x4ed3a7c5f53c6e96186eaf1b670bd2e2a3699c08e070aedf4e5fc6ac246ddc1": {
              name: "Pillage",
              description: "Allows you to raid a structure and pillage resources",
              methods: [
                {
                  name: "Battle Pillage",
                  description: "Pillage a structure",
                  entrypoint: "battle_pillage"
                }
              ]
            },
            "0x2620f65aa2fd72d705306ada1ee7410023a3df03da9291f1ccb744fabfebc0": {
              name: "Battle contract",
              description: "Required to engage in battles",
              methods: [
                {
                  name: "Battle Start",
                  description: "Start a battle",
                  entrypoint: "battle_start"
                },
                {
                  name: "Battle Force Start",
                  description: "Force start a battle",
                  entrypoint: "battle_force_start"
                },
                {
                  name: "Battle Join",
                  description: "Join a battle",
                  entrypoint: "battle_join"
                },
                {
                  name: "Battle Leave",
                  description: "Leave a battle",
                  entrypoint: "battle_leave"
                },
                {
                  name: "Battle Claim",
                  description: "Claim a structure after a battle",
                  entrypoint: "battle_claim"
                },
                {
                  name: "Battle Resolve",
                  description: "Reopens the bank after battle",
                  entrypoint: "battle_resolve"
                }
              ]
            },
            "0x6bf57710571fd159e71b1ed155bb0759027e416c88a06556f321c94c214e768": {
              name: "Leave battle contract",
              description: "Allows armies to leave a battle",
              methods: [
                {
                  name: "Leave Battle",
                  description: "Leave a battle",
                  entrypoint: "leave_battle"
                },
                {
                  name: "Leave Battle If Ended",
                  description: "Leave a battle if its ended",
                  entrypoint: "leave_battle_if_ended"
                }
              ]
            },
            "0x4b6a35c0c541467674ebb9640113a6d79c6f5a468796e9299b8e484a770032a": {
              name: "Building contract",
              description: "Allows to manage buildings",
              methods: [
                {
                  name: "Create",
                  description: "Create a building",
                  entrypoint: "create"
                },
                {
                  name: "Pause Production",
                  description: "Pause the production of a building",
                  entrypoint: "pause_production"
                },
                {
                  name: "Resume Production",
                  description: "Resume production of a building",
                  entrypoint: "resume_production"
                },
                {
                  name: "Destroy a building",
                  description: "Destroy a building",
                  entrypoint: "destroy"
                }
              ]
            },
            "0x57d514154bb4dc319539d4e338312a41c248fb6a5122f82b2f2e11ddd3e67e4": {
              name: "Guild contract",
              description: "Allows guild utilities",
              methods: [
                {
                  name: "Create Guild",
                  description: "Creates a new guild",
                  entrypoint: "create_guild"
                },
                {
                  name: "Join Guild",
                  description: "Join an existing guild",
                  entrypoint: "join_guild"
                },
                {
                  name: "Whitelist Player",
                  description: "Add a player to the guild's whitelist",
                  entrypoint: "whitelist_player"
                },
                {
                  name: "Transfer Guild Ownership",
                  description: "Transfer ownership of the guild to another player",
                  entrypoint: "transfer_guild_ownership"
                },
                {
                  name: "Remove Guild Member",
                  description: "Remove a member from the guild",
                  entrypoint: "remove_guild_member"
                },
                {
                  name: "Remove Player From Whitelist",
                  description: "Remove a player from the guild's whitelist",
                  entrypoint: "remove_player_from_whitelist"
                }
              ]
            },
            "0x2fcc3c1691387321c2f4d6310eda7a14365bd274c1a37ed3948d2e93a56f821": {
              name: "Hyperstructure contract",
              description: "Handles the creation and management of hyperstructures",
              methods: [
                {
                  name: "Get Points",
                  description: "Gets your total number of points",
                  entrypoint: "get_points"
                },
                {
                  name: "Create",
                  description: "Create a new hyperstructure",
                  entrypoint: "create"
                },
                {
                  name: "Contribute To Construction",
                  description: "Contribute resources to hyperstructure construction",
                  entrypoint: "contribute_to_construction"
                },
                {
                  name: "Set Co Owners",
                  description: "Set additional owners for the hyperstructure",
                  entrypoint: "set_co_owners"
                },
                {
                  name: "End Game",
                  description: "Terminates the current game season once you've reached enough points",
                  entrypoint: "end_game"
                },
                {
                  name: "Set Access",
                  description: "Configure access permissions for contributions to the hyperstructure",
                  entrypoint: "set_access"
                }
              ]
            },
            "0xa052c5ca082356bcc8457f0f805eaf18f97d0fdddde3f90f5b238923859ed4": {
              name: "AMM liquidity contract",
              description: "Manages liquidity for the Automated Market Maker",
              methods: [
                {
                  name: "Add",
                  description: "Add liquidity to the pool",
                  entrypoint: "add"
                },
                {
                  name: "Remove",
                  description: "Remove liquidity from the pool",
                  entrypoint: "remove"
                }
              ]
            },
            "0x4a212c52c4035bc9bd170125216604f406dcd75b41be11d3b4d89047366d84d": {
              name: "Exploration contract",
              description: "Allows you to move to unexplored hexes on the map",
              methods: [
                {
                  name: "Explore",
                  description: "Explore an uncharted hex on the game map",
                  entrypoint: "explore"
                }
              ]
            },
            "0x7e3bae0e253a0131063b63ee4d7b27b50329c617ae88b82d529a70f1a11c63": {
              name: "Naming contract",
              description: "Manages entity naming in the game",
              methods: [
                {
                  name: "Set Entity Name",
                  description: "Assign a custom name to a game entity",
                  entrypoint: "set_entity_name"
                },
                {
                  name: "Set Address Name",
                  description: "Assign a custom name to a user's address",
                  entrypoint: "set_address_name"
                }
              ]
            },
            "0x1b480f620ea35431ab43dba634795b14f547ef3e77370db6f0a31f2fdc21d86": {
              name: "Realms contract",
              description: "Manages realm-related actions",
              methods: [
                {
                  name: "Create a realm",
                  description: "Create a new realm",
                  entrypoint: "create"
                },
                {
                  name: "Upgrade Level",
                  description: "Upgrade the level of a realm",
                  entrypoint: "upgrade_level"
                },
                {
                  name: "Quest Claim",
                  description: "Claim rewards from completed quests",
                  entrypoint: "quest_claim"
                }
              ]
            },
            "0x691a60b709ca5c1c5ff86824831f84deb26f0f5d07d70c0f807eab48110d2f6": {
              name: "Resource bridge contract",
              description: "Manages bridge transfers between L2 and Eternum",
              methods: [
                {
                  name: "Deposit Initial",
                  description: "Initial deposit of resources for bridge transfer",
                  entrypoint: "deposit_initial"
                },
                {
                  name: "Deposit",
                  description: "Deposit additional resources for bridge transfer",
                  entrypoint: "deposit"
                },
                {
                  name: "Start Withdraw",
                  description: "Initiate a withdrawal process",
                  entrypoint: "start_withdraw"
                },
                {
                  name: "Finish Withdraw",
                  description: "Finalize a withdrawal process",
                  entrypoint: "finish_withdraw"
                }
              ]
            },
            "0x42c0303a2119a9e20daa60e83c48221cdf1bb2a4c009bab031d1cd3555a127e": {
              name: "Resource contract",
              description: "In-game resource management",
              methods: [
                {
                  name: "Approve",
                  description: "Approve resource transfer",
                  entrypoint: "approve"
                },
                {
                  name: "Send",
                  description: "Send resources to another entity",
                  entrypoint: "send"
                },
                {
                  name: "Pickup",
                  description: "Collect available resources after approval",
                  entrypoint: "pickup"
                }
              ]
            },
            "0x4f92a1d00d3aec8cece60fc2d0fc236fe1d95c54ff0ceb2f393fbc7e0863d8e": {
              name: "AMM swap contract",
              description: "Handles token swaps in the Automated Market Maker",
              methods: [
                {
                  name: "Buy",
                  description: "Purchase tokens from the liquidity pool",
                  entrypoint: "buy"
                },
                {
                  name: "Sell",
                  description: "Sell tokens to the liquidity pool",
                  entrypoint: "sell"
                }
              ]
            },
            "0x7e2b1334398fafbe640f34bacae99b649d633417960ee397b6a8fb117fec819": {
              name: "Market contract",
              description: "Manages trading orders in the in-game market",
              methods: [
                {
                  name: "Create Order",
                  description: "Create a new trading order",
                  entrypoint: "create_order"
                },
                {
                  name: "Accept Order",
                  description: "Accept a trading order",
                  entrypoint: "accept_order"
                },
                {
                  name: "Accept Partial Order",
                  description: "Accept a partial trading order",
                  entrypoint: "accept_partial_order"
                },
                {
                  name: "Cancel Order",
                  description: "Cancel a trading order",
                  entrypoint: "cancel_order"
                }
              ]
            },
            "0x4069c2be57f08fef9f31afc85a5b4c03c208ebdb278b9d853606caa7a9cbee6": {
              name: "Map travel contract",
              description: "Manages player movement across the game map",
              methods: [
                {
                  name: "Travel Hex",
                  description: "Move to a specific hex on the map",
                  entrypoint: "travel_hex"
                }
              ]
            },
            "0x26be0ed574aa9ee6f73b53b12f0a199ddbf4ac697470316cdb3d9d1f5680cab": {
              name: "Army contract",
              description: "Manages army-related actions",
              methods: [
                {
                  name: "Army Create",
                  description: "Create a new army",
                  entrypoint: "army_create"
                },
                {
                  name: "Army Delete",
                  description: "Delete an existing army",
                  entrypoint: "army_delete"
                },
                {
                  name: "Army Buy Troops",
                  description: "Buy troops for an army",
                  entrypoint: "army_buy_troops"
                },
                {
                  name: "Army Merge Troops",
                  description: "Merge troops from multiple armies",
                  entrypoint: "army_merge_troops"
                }
              ]
            },
            "0x051fea4450da9d6aee758bdeba88b2f665bcbf549d2c61421aa724e9ac0ced8f": {
              name: "VRF Provider",
              description: "Verifiable Random Function contract, allows randomness in the game",
              methods: [
                {
                  name: "Request Random",
                  description: "Allows requesting random numbers from the VRF provider",
                  entrypoint: "request_random"
                }
              ]
            },
            "0x057675b9c0bd62b096a2e15502a37b290fa766ead21c33eda42993e48a714b80": {
              name: "Season pass ERC20 contract",
              description: "Manages the season passes",
              methods: [
                {
                  name: "Approve for all",
                  description: "Approves transfer of season pass",
                  entrypoint: "set_approval_for_all"
                }
              ]
            },
            "0x4b5e65a9617c7ba3c7ea64324ff4338a400adb1a3cfe903b3f8b647cbb59fb7": {
              name: "Season Systems",
              description: "Register and claim",
              methods: [
                {
                  name: "Register",
                  description: "Registers to leaderboard",
                  entrypoint: "register_to_leaderboard"
                },
                {
                  name: "Claim",
                  description: "Claim",
                  entrypoint: "claim_leaderboard_rewards"
                }
              ]
            }
          },
          messages: [
            {
              types: {
                StarknetDomain: [
                  {
                    name: "name",
                    type: "shortstring"
                  },
                  {
                    name: "version",
                    type: "shortstring"
                  },
                  {
                    name: "chainId",
                    type: "shortstring"
                  },
                  {
                    name: "revision",
                    type: "shortstring"
                  }
                ],
                "s0_eternum-Message": [
                  {
                    name: "identity",
                    type: "ContractAddress"
                  },
                  {
                    name: "channel",
                    type: "shortstring"
                  },
                  {
                    name: "content",
                    type: "string"
                  },
                  {
                    name: "timestamp",
                    type: "felt"
                  },
                  {
                    name: "salt",
                    type: "felt"
                  }
                ]
              },
              primaryType: "s0_eternum-Message",
              domain: {
                name: "Eternum",
                version: "1",
                chainId: "SN_MAIN",
                revision: "1"
              }
            }
          ]
        }
      }
    },
    theme: {
      name: "Eternum",
      icon: "https://static.cartridge.gg/presets/eternum/icon.svg",
      cover: "https://static.cartridge.gg/presets/eternum/cover.png",
      colors: {
        primary: "#dc8b07"
      },
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        },
        svg: {
          16: "icon@16.svg",
          32: "icon@32.svg",
          64: "icon@64.svg",
          128: "icon@128.svg",
          256: "icon@256.svg"
        }
      }
    }
  },
  flippyflop: {
    origin: "flippyflop.gg",
    theme: {
      colors: {
        primary: "#F38332"
      },
      cover: "https://static.cartridge.gg/presets/flippyflop/cover.png",
      icon: "https://static.cartridge.gg/presets/flippyflop/icon.png",
      name: "FlippyFlop",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    }
  },
  "force-prime": {
    origin: "forceprime.io",
    theme: {
      colors: {
        primary: "#E1CC89"
      },
      cover: "https://static.cartridge.gg/presets/force-prime/cover.png",
      icon: "https://static.cartridge.gg/presets/force-prime/icon.png",
      name: "Force Prime",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    }
  },
  "jokers-of-neon": {
    origin: "jokersofneon.com",
    theme: {
      colors: {
        primary: "#A144B2"
      },
      cover: "https://static.cartridge.gg/presets/jokers-of-neon/cover.png",
      icon: "https://static.cartridge.gg/presets/jokers-of-neon/icon.png",
      name: "Jokers of Neon",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    }
  },
  "loot-survivor": {
    origin: "lootsurvivor.io",
    chains: {
      SN_MAIN: {
        policies: {
          contracts: {
            "0x0305f26ad19e0a10715d9f3137573d3a543de7b707967cd85d11234d6ec0fb7e": {
              methods: [
                {
                  entrypoint: "attack"
                },
                {
                  entrypoint: "drop"
                },
                {
                  entrypoint: "equip"
                },
                {
                  entrypoint: "explore"
                },
                {
                  entrypoint: "flee"
                },
                {
                  entrypoint: "new_game"
                },
                {
                  entrypoint: "transfer_from"
                },
                {
                  entrypoint: "upgrade"
                }
              ]
            },
            "0x3347382d530ff6acb9283ac1d78471187aae8a4690e9316bb4e3c3365ff7a86": {
              methods: [
                {
                  entrypoint: "enter_tournament"
                },
                {
                  entrypoint: "start_tournament"
                }
              ]
            }
          }
        }
      }
    },
    theme: {
      colors: {
        primary: "#33FF33"
      },
      cover: "https://static.cartridge.gg/presets/loot-survivor/cover.png",
      icon: "https://static.cartridge.gg/presets/loot-survivor/icon.png",
      name: "Loot Survivor",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    }
  },
  metacube: {
    origin: ["*.metacube.games", "metacube.games"],
    theme: {
      colors: {
        primary: "#11ffbb"
      },
      cover: "https://static.cartridge.gg/presets/metacube/cover.png",
      icon: "https://static.cartridge.gg/presets/metacube/icon.png",
      name: "Metacube",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    }
  },
  "metal-slug": {
    origin: "https://metalslug.starkarcade.com/",
    chains: {
      SN_MAIN: {
        policies: {
          contracts: {
            "0x6aa878dfaa2710b66f26c02e52cbcc8adddd0c3e9b0d766fb045c8250490be0": {
              name: "Metal Slug Systems",
              description: "Allows you to interact with metal slug features.",
              methods: [
                {
                  name: "Claim end match reward",
                  description: "A method to claim reward after finishing a match.",
                  entrypoint: "claim_end_match_reward"
                },
                {
                  name: "Claim Points",
                  description: "A method to claim points after finishing suvival match.",
                  entrypoint: "claim_points"
                },
                {
                  name: "Graft Treasure Chest",
                  description: "A method to graft a treasure chest after collect enough materials.",
                  entrypoint: "graft_treasure_chest"
                },
                {
                  name: "Open Treasure Chest",
                  description: "A method to open a treasure chest.",
                  entrypoint: "open_treasure_chest"
                }
              ]
            }
          }
        }
      }
    },
    theme: {
      colors: {
        primary: "#C00F0C"
      },
      cover: "https://static.cartridge.gg/presets/metal-slug/cover.png",
      icon: "https://static.cartridge.gg/presets/metal-slug/icon.png",
      name: "Dragark",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    }
  },
  nums: {
    origin: ["*.nums.gg", "nums.gg"],
    chains: {
      SN_MAIN: {
        policies: {
          contracts: {
            "0x07ccfbc43c109efd466638defa52702382ace922051d35a0554b5ccd02a8f155": {
              name: "Game Actions",
              methods: [
                {
                  name: "Create Game",
                  entrypoint: "create_game",
                  description: "Creates a new game"
                },
                {
                  name: "Set Slot",
                  entrypoint: "set_slot",
                  description: "Sets one slot for the game"
                }
              ]
            },
            "0x00ea44dd8e971d3af9f99568577bf14b0a80a7f7763fa6281840ab68a8a53ba9": {
              name: "Claim Actions",
              methods: [
                {
                  name: "Claim Appchain Reward",
                  entrypoint: "claim_reward",
                  description: "Claims token rewards on Appchain"
                }
              ]
            },
            "0x03ee42961dc151d740df95c44b929abe85cf66e8444e0279252dd99b055c64b0": {
              name: "Rewards Claim",
              methods: [
                {
                  name: "Consume Reward on Starknet",
                  entrypoint: "consume_claim_reward",
                  description: "Consumes a claim reward message on Starknet"
                }
              ]
            },
            "0x7ed472bdde3b19a5cf2334ad0f368426272f477938270b1b04259f159bdc0e2": {
              name: "VRF Provider",
              methods: [
                {
                  name: "Request Random",
                  entrypoint: "request_random",
                  description: "Requests a random number from the VRF contract"
                }
              ]
            },
            "0x4d776373427434a22f7d60d0f7fe0e336fd830edf4294acec33d9f2e1275327": {
              name: "Social",
              description: "Social contract to manage your social activities",
              methods: [
                {
                  name: "pin",
                  entrypoint: "pin",
                  description: "Pin an achievement."
                },
                {
                  name: "unpin",
                  entrypoint: "unpin",
                  description: "Unpin an achievement."
                }
              ]
            }
          }
        }
      }
    },
    theme: {
      colors: {
        primary: "#9E84E9"
      },
      cover: "https://static.cartridge.gg/presets/nums/cover.png",
      icon: "https://static.cartridge.gg/presets/nums/icon.png",
      name: "Nums",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    }
  },
  paved: {
    origin: "paved.gg",
    theme: {
      colors: {
        primary: "#B0CAF8"
      },
      cover: "https://static.cartridge.gg/presets/paved/cover.png",
      icon: "https://static.cartridge.gg/presets/paved/icon.svg",
      name: "Paved",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        },
        svg: {
          16: "icon@16.svg",
          32: "icon@32.svg",
          64: "icon@64.svg",
          128: "icon@128.svg",
          256: "icon@256.svg"
        }
      }
    }
  },
  pistols: {
    origin: ["*.pistols.gg", "*.underware.gg"],
    theme: {
      colors: {
        primary: "#EF9758"
      },
      cover: "https://static.cartridge.gg/presets/pistols/cover.png",
      icon: "https://static.cartridge.gg/presets/pistols/icon.png",
      name: "Pistols at Dawn",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    },
    chains: {
      SN_MAIN: {
        policies: {
          contracts: {
            "0x02c6a7c98a9dea8322b51018eef7be99ebedd209cebdaacb9f4c5bbf661c1cc9": {
              description: "Game loop contract",
              methods: [
                {
                  entrypoint: "commit_moves",
                  description: "Commit moves of a Duelist in a Duel"
                },
                {
                  entrypoint: "reveal_moves",
                  description: "Reveal moves of a Duelist in a Duel"
                },
                {
                  entrypoint: "collect_duel",
                  description: "Close expired duels"
                },
                {
                  entrypoint: "clear_call_to_action",
                  description: "Clear the required action call for a duelist"
                }
              ]
            },
            "0x0426c16fe76f12586718c07e47c8e4312e9fee5e7dc849a75f3c587ad9e70b4f": {
              description: "Bank contract",
              methods: [
                {
                  entrypoint: "sponsor_duelists",
                  description: "Sponsor duelist starter packs with $LORDS"
                },
                {
                  entrypoint: "sponsor_season",
                  description: "Sponsor the current season with $LORDS"
                },
                {
                  entrypoint: "sponsor_tournament",
                  description: "Sponsor a tournament with $LORDS"
                },
                {
                  entrypoint: "collect_season",
                  description: "Close the current season and start the next one"
                }
              ]
            },
            "0x071333ac75b7d5ba89a2d0c2b67d5b955258a4d46eb42f3428da6137bbbfdfd9": {
              description: "Packs ERC721 contract",
              methods: [
                {
                  entrypoint: "claim_starter_pack",
                  description: "Claim the starter pack, mint Duelists"
                },
                {
                  entrypoint: "claim_gift",
                  description: "Claim gift pack, if available"
                },
                {
                  entrypoint: "purchase",
                  description: "Purchase a closed pack"
                },
                {
                  entrypoint: "open",
                  description: "Open a pack, mint its contents"
                }
              ]
            },
            "0x02e9c711b1a7e2784570b1bda5082a92606044e836ba392d2b977d280fb74b3c": {
              description: "Duel ERC721 contract",
              methods: [
                {
                  entrypoint: "create_duel",
                  description: "Create a Duel, mint its token"
                },
                {
                  entrypoint: "reply_duel",
                  description: "Reply to a Duel (accept or reject)"
                }
              ]
            },
            "0x07aaa9866750a0db82a54ba8674c38620fa2f967d2fbb31133def48e0527c87f": {
              description: "Duelist ERC721 contract",
              methods: [
                {
                  entrypoint: "poke",
                  description: "Reactivates an inactive Duelist"
                },
                {
                  entrypoint: "sacrifice",
                  description: "Sacrifices a Duelist"
                },
                {
                  entrypoint: "memorialize",
                  description: "Memorializes a Duelist"
                }
              ]
            },
            "0x051fea4450da9d6aee758bdeba88b2f665bcbf549d2c61421aa724e9ac0ced8f": {
              description: "Cartridge VRF Provider",
              methods: [
                {
                  entrypoint: "request_random",
                  description: "Request a random number"
                }
              ]
            }
          },
          messages: [
            {
              types: {
                StarknetDomain: [
                  {
                    name: "name",
                    type: "shortstring"
                  },
                  {
                    name: "version",
                    type: "shortstring"
                  },
                  {
                    name: "chainId",
                    type: "shortstring"
                  },
                  {
                    name: "revision",
                    type: "shortstring"
                  }
                ],
                Message: [
                  {
                    name: "duelId",
                    type: "felt"
                  },
                  {
                    name: "duelistId",
                    type: "felt"
                  }
                ]
              },
              primaryType: "Message",
              domain: {
                name: "Underware_gg",
                version: "1.0.0",
                chainId: "SN_MAIN",
                revision: "1"
              },
              description: "Verify the identity of a player in a Duel"
            },
            {
              types: {
                StarknetDomain: [
                  {
                    name: "name",
                    type: "shortstring"
                  },
                  {
                    name: "version",
                    type: "shortstring"
                  },
                  {
                    name: "chainId",
                    type: "shortstring"
                  },
                  {
                    name: "revision",
                    type: "shortstring"
                  }
                ],
                "pistols-PlayerOnline": [
                  {
                    name: "identity",
                    type: "ContractAddress"
                  },
                  {
                    name: "timestamp",
                    type: "felt"
                  }
                ]
              },
              primaryType: "pistols-PlayerOnline",
              domain: {
                name: "Underware_gg",
                version: "1.0.0",
                chainId: "SN_MAIN",
                revision: "1"
              },
              name: "PlayerOnline",
              description: "Notify when a player is online"
            },
            {
              types: {
                StarknetDomain: [
                  {
                    name: "name",
                    type: "shortstring"
                  },
                  {
                    name: "version",
                    type: "shortstring"
                  },
                  {
                    name: "chainId",
                    type: "shortstring"
                  },
                  {
                    name: "revision",
                    type: "shortstring"
                  }
                ],
                "pistols-PlayerBookmark": [
                  {
                    name: "identity",
                    type: "ContractAddress"
                  },
                  {
                    name: "target_address",
                    type: "ContractAddress"
                  },
                  {
                    name: "target_id",
                    type: "u128"
                  },
                  {
                    name: "enabled",
                    type: "bool"
                  }
                ]
              },
              primaryType: "pistols-PlayerBookmark",
              domain: {
                name: "Underware_gg",
                version: "1.0.0",
                chainId: "SN_MAIN",
                revision: "1"
              },
              name: "PlayerBookmark",
              description: "Notify when a player follows another player or token"
            }
          ]
        }
      },
      SN_SEPOLIA: {
        policies: {
          contracts: {
            "0x02c6a7c98a9dea8322b51018eef7be99ebedd209cebdaacb9f4c5bbf661c1cc9": {
              description: "Game loop contract",
              methods: [
                {
                  entrypoint: "commit_moves",
                  description: "Commit moves of a Duelist in a Duel"
                },
                {
                  entrypoint: "reveal_moves",
                  description: "Reveal moves of a Duelist in a Duel"
                },
                {
                  entrypoint: "collect_duel",
                  description: "Close expired duels"
                },
                {
                  entrypoint: "clear_call_to_action",
                  description: "Clear the required action call for a duelist"
                }
              ]
            },
            "0x0426c16fe76f12586718c07e47c8e4312e9fee5e7dc849a75f3c587ad9e70b4f": {
              description: "Bank contract",
              methods: [
                {
                  entrypoint: "sponsor_duelists",
                  description: "Sponsor duelist starter packs with $LORDS"
                },
                {
                  entrypoint: "sponsor_season",
                  description: "Sponsor the current season with $LORDS"
                },
                {
                  entrypoint: "sponsor_tournament",
                  description: "Sponsor a tournament with $LORDS"
                },
                {
                  entrypoint: "collect_season",
                  description: "Close the current season and start the next one"
                }
              ]
            },
            "0x071333ac75b7d5ba89a2d0c2b67d5b955258a4d46eb42f3428da6137bbbfdfd9": {
              description: "Packs ERC721 contract",
              methods: [
                {
                  entrypoint: "claim_starter_pack",
                  description: "Claim the starter pack, mint Duelists"
                },
                {
                  entrypoint: "claim_gift",
                  description: "Claim gift pack, if available"
                },
                {
                  entrypoint: "purchase",
                  description: "Purchase a closed pack"
                },
                {
                  entrypoint: "open",
                  description: "Open a pack, mint its contents"
                }
              ]
            },
            "0x02e9c711b1a7e2784570b1bda5082a92606044e836ba392d2b977d280fb74b3c": {
              description: "Duel ERC721 contract",
              methods: [
                {
                  entrypoint: "create_duel",
                  description: "Create a Duel, mint its token"
                },
                {
                  entrypoint: "reply_duel",
                  description: "Reply to a Duel (accept or reject)"
                }
              ]
            },
            "0x07aaa9866750a0db82a54ba8674c38620fa2f967d2fbb31133def48e0527c87f": {
              description: "Duelist ERC721 contract",
              methods: [
                {
                  entrypoint: "poke",
                  description: "Reactivates an inactive Duelist"
                },
                {
                  entrypoint: "sacrifice",
                  description: "Sacrifices a Duelist"
                },
                {
                  entrypoint: "memorialize",
                  description: "Memorializes a Duelist"
                }
              ]
            },
            "0x051fea4450da9d6aee758bdeba88b2f665bcbf549d2c61421aa724e9ac0ced8f": {
              description: "Cartridge VRF Provider",
              methods: [
                {
                  entrypoint: "request_random",
                  description: "Request a random number"
                }
              ]
            }
          },
          messages: [
            {
              types: {
                StarknetDomain: [
                  {
                    name: "name",
                    type: "shortstring"
                  },
                  {
                    name: "version",
                    type: "shortstring"
                  },
                  {
                    name: "chainId",
                    type: "shortstring"
                  },
                  {
                    name: "revision",
                    type: "shortstring"
                  }
                ],
                Message: [
                  {
                    name: "duelId",
                    type: "felt"
                  },
                  {
                    name: "duelistId",
                    type: "felt"
                  }
                ]
              },
              primaryType: "Message",
              domain: {
                name: "Underware_gg",
                version: "1.0.0",
                chainId: "SN_SEPOLIA",
                revision: "1"
              },
              description: "Verify the identity of a player in a Duel"
            },
            {
              types: {
                StarknetDomain: [
                  {
                    name: "name",
                    type: "shortstring"
                  },
                  {
                    name: "version",
                    type: "shortstring"
                  },
                  {
                    name: "chainId",
                    type: "shortstring"
                  },
                  {
                    name: "revision",
                    type: "shortstring"
                  }
                ],
                "pistols-PlayerOnline": [
                  {
                    name: "identity",
                    type: "ContractAddress"
                  },
                  {
                    name: "timestamp",
                    type: "felt"
                  }
                ]
              },
              primaryType: "pistols-PlayerOnline",
              domain: {
                name: "Underware_gg",
                version: "1.0.0",
                chainId: "SN_SEPOLIA",
                revision: "1"
              },
              name: "PlayerOnline",
              description: "Notify when a player is online"
            },
            {
              types: {
                StarknetDomain: [
                  {
                    name: "name",
                    type: "shortstring"
                  },
                  {
                    name: "version",
                    type: "shortstring"
                  },
                  {
                    name: "chainId",
                    type: "shortstring"
                  },
                  {
                    name: "revision",
                    type: "shortstring"
                  }
                ],
                "pistols-PlayerBookmark": [
                  {
                    name: "identity",
                    type: "ContractAddress"
                  },
                  {
                    name: "target_address",
                    type: "ContractAddress"
                  },
                  {
                    name: "target_id",
                    type: "u128"
                  },
                  {
                    name: "enabled",
                    type: "bool"
                  }
                ]
              },
              primaryType: "pistols-PlayerBookmark",
              domain: {
                name: "Underware_gg",
                version: "1.0.0",
                chainId: "SN_SEPOLIA",
                revision: "1"
              },
              name: "PlayerBookmark",
              description: "Notify when a player follows another player or token"
            }
          ]
        }
      }
    }
  },
  pixelaw: {
    origin: "dojo.pixelaw.xyz",
    theme: {
      colors: {
        primary: "#7C00B1",
        primaryForeground: "white"
      },
      cover: "https://static.cartridge.gg/presets/pixelaw/cover.png",
      icon: "https://static.cartridge.gg/presets/pixelaw/icon.svg",
      name: "Pixelaw",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        },
        svg: {
          16: "icon@16.svg",
          32: "icon@32.svg",
          64: "icon@64.svg",
          128: "icon@128.svg",
          256: "icon@256.svg"
        }
      }
    }
  },
  ponziland: {
    origin: ["*.ponzi.land"],
    theme: {
      colors: {
        primary: "#F38332"
      },
      cover: "https://static.cartridge.gg/presets/ponziland/cover.png",
      icon: "https://static.cartridge.gg/presets/ponziland/icon.svg",
      name: "PonziLand",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        },
        svg: {
          16: "icon@16.svg",
          32: "icon@32.svg",
          64: "icon@64.svg",
          128: "icon@128.svg",
          256: "icon@256.svg"
        }
      }
    },
    chains: {
      SN_MAIN: {
        policies: {
          contracts: {
            "0x77eeeef469121d1761bb25efbfce7650f5c7fbf00d63cb1b778b774783b2c6": {
              name: "PonziLand Systems",
              description: "Main game contract",
              methods: [
                {
                  name: "Bid",
                  entrypoint: "bid",
                  description: "Bid for auction land"
                },
                {
                  name: "Buy",
                  entrypoint: "buy",
                  description: "Buy land from another player"
                },
                {
                  name: "Claim",
                  entrypoint: "claim",
                  description: "Claim rewards for a single land"
                },
                {
                  name: "Claim All",
                  entrypoint: "claim_all",
                  description: "Claim rewards for lands"
                },
                {
                  name: "Increase Price",
                  entrypoint: "increase_price",
                  description: "Increase price of the land"
                },
                {
                  name: "Increase Stake",
                  entrypoint: "increase_stake",
                  description: "Increase stake of the land"
                },
                {
                  name: "Level Up",
                  entrypoint: "level_up",
                  description: "Level up the land"
                }
              ]
            },
            "0x524624cb89898776386140c36093d1bc4dd1654d125f0f677c9cd2b122463ff": {
              name: "PonziLand Auth System",
              description: "Contract to allow authorized players to play",
              methods: [
                {
                  name: "Add Authorized",
                  entrypoint: "add_authorized_with_signature",
                  description: "Add authorized with signature"
                }
              ]
            },
            "0x5735fa6be5dd248350866644c0a137e571f9d637bb4db6532ddd63a95854b58": {
              name: "eSTRK Token",
              description: "eSTRK ERC20 methods",
              methods: [
                {
                  name: "Approve",
                  entrypoint: "approve",
                  description: "eSTRK allowance"
                }
              ]
            },
            "0x415c058a41cc80e7368562564c96fc4e3c03b23e32ba07a5c8cadc262b50c3c": {
              name: "ePAPER Token",
              description: "ePAPER ERC20 approval",
              methods: [
                {
                  name: "Approve",
                  entrypoint: "approve",
                  description: "ePAPER allowance"
                }
              ]
            },
            "0x4b66d22d3001daad50fb853c0c1cb3b96d1745acb295bae4a6d54b29125ed09": {
              name: "eLORDS Token",
              description: "eLORDS ERC20 approval",
              methods: [
                {
                  name: "Approve",
                  entrypoint: "approve",
                  description: "eLORDS allowance"
                }
              ]
            },
            "0x1920ef3c5e765454dd3f6aeb5420ef524830e0b5f9a95ec2e1b9ee2073a16d1": {
              name: "eBROTHER Token",
              description: "eBROTHER ERC20 approval",
              methods: [
                {
                  name: "Approve",
                  entrypoint: "approve",
                  description: "eBROTHER allowance"
                }
              ]
            },
            "0x79aba4c89e9cc3495318d2479fe93601e1188ff5d9a8823e3dc736d74bb437f": {
              name: "ePAL Token",
              description: "ePAL ERC20 approval",
              methods: [
                {
                  name: "Approve",
                  entrypoint: "approve",
                  description: "ePAL allowance"
                }
              ]
            },
            "0x38217779933c147320af3239e2dd098312e3074e0898001c79939c2e676fe8c": {
              name: "eETH Token",
              description: "eETH ERC20 approval",
              methods: [
                {
                  name: "Approve",
                  entrypoint: "approve",
                  description: "eETH allowance"
                }
              ]
            },
            "0x4c090a1a34a3ba423e63a498ce23de7c7a4f0f1a8128fa768a09738606cbb9e": {
              name: "eBTC Token",
              description: "eBTC ERC20 approval",
              methods: [
                {
                  name: "Approve",
                  entrypoint: "approve",
                  description: "eBTC allowance"
                }
              ]
            }
          },
          messages: [
            {
              name: "Socialink - Register",
              description: "Registers your controller wallet to a new Socialink account",
              types: {
                StarknetDomain: [
                  {
                    name: "name",
                    type: "shortstring"
                  },
                  {
                    name: "version",
                    type: "shortstring"
                  },
                  {
                    name: "chainId",
                    type: "shortstring"
                  },
                  {
                    name: "revision",
                    type: "shortstring"
                  }
                ],
                register: [
                  {
                    name: "username",
                    type: "felt"
                  },
                  {
                    name: "timestamp",
                    type: "felt"
                  }
                ]
              },
              primaryType: "register",
              domain: {
                name: "socialink",
                version: "1",
                chainId: "SN_MAIN",
                revision: "1"
              }
            },
            {
              name: "Socialink - Link",
              description: "Links your social account to a Socialink account",
              types: {
                StarknetDomain: [
                  {
                    name: "name",
                    type: "shortstring"
                  },
                  {
                    name: "version",
                    type: "shortstring"
                  },
                  {
                    name: "chainId",
                    type: "shortstring"
                  },
                  {
                    name: "revision",
                    type: "shortstring"
                  }
                ],
                link: [
                  {
                    name: "token",
                    type: "string"
                  },
                  {
                    name: "provider",
                    type: "string"
                  },
                  {
                    name: "nonce",
                    type: "felt"
                  },
                  {
                    name: "timestamp",
                    type: "felt"
                  }
                ]
              },
              primaryType: "link",
              domain: {
                name: "socialink",
                version: "1",
                chainId: "SN_MAIN",
                revision: "1"
              }
            },
            {
              name: "Socialink - Mint",
              description: "Confirms your selection of token for the tournament mint",
              types: {
                StarknetDomain: [
                  {
                    name: "name",
                    type: "shortstring"
                  },
                  {
                    name: "version",
                    type: "shortstring"
                  },
                  {
                    name: "chainId",
                    type: "shortstring"
                  },
                  {
                    name: "revision",
                    type: "shortstring"
                  }
                ],
                mint: [
                  {
                    name: "token",
                    type: "string"
                  },
                  {
                    name: "nonce",
                    type: "felt"
                  },
                  {
                    name: "timestamp",
                    type: "felt"
                  }
                ]
              },
              primaryType: "mint",
              domain: {
                name: "socialink",
                version: "1",
                chainId: "SN_MAIN",
                revision: "1"
              }
            }
          ]
        }
      }
    }
  },
  "realm-of-ra": {
    origin: "mancala.realmofra.com",
    theme: {
      colors: {
        primary: "#de9534"
      },
      cover: "https://static.cartridge.gg/presets/realm-of-ra/cover.png",
      icon: "https://static.cartridge.gg/presets/realm-of-ra/icon.png",
      name: "Realm of Ra",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    }
  },
  "savage-summit": {
    origin: "savagesummit.io",
    theme: {
      colors: {
        primary: "#fbf7da"
      },
      cover: "https://static.cartridge.gg/presets/savage-summit/cover.png",
      icon: "https://static.cartridge.gg/presets/savage-summit/icon.png",
      name: "Savage Summit",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    }
  },
  "tale-weaver": {
    origin: "",
    theme: {
      colors: {
        primary: "#fce377"
      },
      cover: "https://static.cartridge.gg/presets/tale-weaver/cover.png",
      icon: "https://static.cartridge.gg/presets/tale-weaver/icon.png",
      name: "Tale Weaver",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    }
  },
  wardens: {
    origin: "app.wardens.xyz",
    theme: {
      colors: {
        primary: "#f7ac18"
      },
      cover: "https://static.cartridge.gg/presets/wardens/cover.jpg",
      icon: "https://static.cartridge.gg/presets/wardens/icon.png",
      name: "Wardens",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    }
  },
  zkastle: {
    origin: "zkastle.vercel.app",
    theme: {
      colors: {
        primary: "#E50D2C"
      },
      cover: "https://static.cartridge.gg/presets/zkastle/cover.png",
      icon: "https://static.cartridge.gg/presets/zkastle/icon.svg",
      name: "zKastle",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        },
        svg: {
          16: "icon@16.svg",
          32: "icon@32.svg",
          64: "icon@64.svg",
          128: "icon@128.svg",
          256: "icon@256.svg"
        }
      }
    }
  },
  zktt: {
    origin: "zktable.top",
    theme: {
      colors: {
        primary: "#FFFFFF"
      },
      cover: "https://static.cartridge.gg/presets/zktt/cover.png",
      icon: "https://static.cartridge.gg/presets/zktt/icon.png",
      name: "zKTT",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    }
  },
  zkube: {
    origin: "app.zkube.xyz",
    theme: {
      colors: {
        primary: "#5bc3e6"
      },
      cover: "https://static.cartridge.gg/presets/zkube/cover.png",
      icon: "https://static.cartridge.gg/presets/zkube/icon.png",
      name: "zKube",
      optimizedCover: {
        webp: {
          768: "cover@768.webp",
          1024: "cover@1024.webp",
          1440: "cover@1440.webp"
        },
        jpg: {
          768: "cover@768.jpg",
          1024: "cover@1024.jpg",
          1440: "cover@1440.jpg"
        },
        png: {
          768: "cover@768.png",
          1024: "cover@1024.png",
          1440: "cover@1440.png"
        }
      },
      optimizedIcon: {
        webp: {
          16: "icon@16.webp",
          32: "icon@32.webp",
          64: "icon@64.webp",
          128: "icon@128.webp",
          256: "icon@256.webp"
        },
        png: {
          16: "icon@16.png",
          32: "icon@32.png",
          64: "icon@64.png",
          128: "icon@128.png",
          256: "icon@256.png"
        }
      }
    }
  }
}, Xt = [
  {
    name: "Wrapped BTC",
    symbol: "WBTC",
    decimals: 8,
    l2_token_address: "0x03fe2b97c1fd336e750087d68b9b867997fd64a2661ff3ca5a7c771641e8e7ac",
    sort_order: 0,
    total_supply: null,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/7dcb2db2-a7a7-44af-660b-8262e057a100/logo"
  },
  {
    name: "USD Coin",
    symbol: "USDC",
    decimals: 6,
    l2_token_address: "0x053c91253bc9682c04929ca02ed00b3e423f6710d2ee7e0d5ebb06f3ecf368a8",
    sort_order: 5,
    total_supply: null,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/e5aaa970-a998-47e8-bd43-4a3b56b87200/logo"
  },
  {
    name: "LUSD Stablecoin",
    symbol: "LUSD",
    decimals: 18,
    l2_token_address: "0x070a76fd48ca0ef910631754d77dd822147fe98a569b826ec85e3c33fde586ac",
    sort_order: 3,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/dc0ae733-5498-4afa-f475-48dba677aa00/logo"
  },
  {
    name: "Tether USD",
    symbol: "USDT",
    decimals: 6,
    l2_token_address: "0x068f5c6a61780768455de69077e07e89787839bf8166decfbf92b645209c0fb8",
    sort_order: 4,
    total_supply: null,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/c8a721d1-07c3-46e4-ab4e-523977c30b00/logo"
  },
  {
    name: "Ether",
    symbol: "ETH",
    decimals: 18,
    l2_token_address: "0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7",
    sort_order: 3,
    total_supply: null,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/e07829b7-0382-4e03-7ecd-a478c5aa9f00/logo"
  },
  {
    name: "Dai Stablecoin",
    symbol: "DAIv0",
    decimals: 18,
    l2_token_address: "0x00da114221cb83fa859dbdb4c44beeaa0bb37c7537ad5ae66fe5e0efd20e6eb3",
    sort_order: 4,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/919e761b-56f7-4f53-32aa-5e066f7f6200/logo"
  },
  {
    name: "Dai Stablecoin",
    symbol: "DAI",
    decimals: 18,
    l2_token_address: "0x05574eb6b8789a91466f902c380d978e472db68170ff82a5b650b95a58ddf4ad",
    sort_order: 4,
    total_supply: null,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/919e761b-56f7-4f53-32aa-5e066f7f6200/logo"
  },
  {
    name: "Legacy Starknet Wrapped Staked Ether",
    symbol: "wstETH-legacy",
    decimals: 18,
    l2_token_address: "0x042b8f0484674ca266ac5d08e4ac6a3fe65bd3129795def2dca5c34ecc5f96d2",
    sort_order: 1,
    total_supply: null,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/26162dcc-29c2-4f5e-3acd-5e6be1f07a00/logo"
  },
  {
    name: "Wrapped Staked Ether",
    symbol: "wstETH",
    decimals: 18,
    l2_token_address: "0x0057912720381af14b0e5c87aa4718ed5e527eab60b3801ebf702ab09139e38b",
    sort_order: 1,
    total_supply: null,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/dbbcbdea-1a92-437d-3701-4a5ee129d000/logo"
  },
  {
    name: "Rocket Pool ETH",
    symbol: "rETH",
    decimals: 18,
    l2_token_address: "0x0319111a5037cbec2b3e638cc34a3474e2d2608299f3e62866e9cc683208c610",
    sort_order: 1,
    total_supply: null,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/c9f2d6fe-fbc6-4384-0990-923dfcb7a200/logo"
  },
  {
    name: "LORDS",
    symbol: "LORDS",
    decimals: 18,
    l2_token_address: "0x0124aeb495b947201f5fac96fd1138e326ad86195b98df6dec9009158a533b49",
    sort_order: 1,
    total_supply: 509e5,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/a3bfe959-50c4-4f89-0aef-b19207d82a00/logo"
  },
  {
    name: "R Stablecoin",
    symbol: "R",
    decimals: 18,
    l2_token_address: "0x01fa2fb85f624600112040e1f3a848f53a37ed5a7385810063d5fe6887280333",
    sort_order: 3,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/77612e4e-f7ee-4dba-2066-af321843ef00/logo"
  },
  {
    name: "Frax",
    symbol: "FRAX",
    decimals: 18,
    l2_token_address: "0x009c6b4fb13dfaa025c1383ed6190af8ed8cbb09d9588a3bb020feb152442406",
    sort_order: 1,
    total_supply: 649462235,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/eeaf0779-e492-474c-ef19-b27843525600/logo"
  },
  {
    name: "Frax Share",
    symbol: "FXS",
    decimals: 18,
    l2_token_address: "0x0058efd0e73c33a848ffaa88738d128ebf0af98ea78cf3c14dc757bb02d39ffb",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/98bea621-1e4f-4d63-9689-bdaef0d56500/logo"
  },
  {
    name: "Staked Frax Ether",
    symbol: "sfrxETH",
    decimals: 18,
    l2_token_address: "0x04578fffc279e61b5cb0267a5f8e24b6089d40f93158fbbad2cb23b8622c9233",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/cd6fe18a-25db-4de9-758a-daf3b364ea00/logo"
  },
  {
    name: "Uniswap",
    symbol: "UNI",
    decimals: 18,
    l2_token_address: "0x049210ffc442172463f3177147c1aeaa36c51d152c1b0630f2364c300d4f48ee",
    sort_order: 1,
    total_supply: 1e9,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/361b018e-bd53-4019-27c8-7cf8d9031b00/logo"
  },
  {
    name: "Paper",
    symbol: "PAPER",
    decimals: 18,
    l2_token_address: "0x0410466536b5ae074f7fea81e5533b8134a9fa08b3dd077dd9db08f64997d113",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/811f019a-0461-4cff-6c1e-442102863f00/logo"
  },
  {
    name: "StarkPepe",
    symbol: "xSPEPE",
    decimals: 18,
    l2_token_address: "0x06f15ec4b6ff0b7f7a216c4b2ccdefc96cbf114d6242292ca82971592f62273b",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    disabled: !0
  },
  {
    name: "StarkNet Token",
    symbol: "STRK",
    decimals: 18,
    l2_token_address: "0x04718f5a0fc34cc1af16a1cdee98ffb20c31f5cd61d6ab07201858f4287c938d",
    sort_order: 2,
    total_supply: 1e10,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/1b126320-367c-48ed-cf5a-ba7580e49600/logo"
  },
  {
    name: "zkLend Token",
    symbol: "ZEND",
    decimals: 18,
    l2_token_address: "0x00585c32b625999e6e5e78645ff8df7a9001cf5cf3eb6b80ccdd16cb64bd3a34",
    sort_order: 1,
    total_supply: null,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/95515b0e-1230-4158-10f1-56888f613c00/logo"
  },
  {
    name: "Ekubo Protocol",
    symbol: "EKUBO",
    decimals: 18,
    l2_token_address: "0x075afe6402ad5a5c20dd25e10ec3b3986acaa647b77e4ae24b0cbc9a54a27a87",
    sort_order: 1,
    total_supply: 1e7,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/634d9c36-2f0b-4781-93e6-72d701b5af00/logo"
  },
  {
    name: "SOCKS",
    symbol: "SOCKS",
    decimals: 18,
    l2_token_address: "0x023ed2ba4fb5709302c5dfd739fa7613359042f143286c115b6c7f7dc2601015",
    sort_order: 1,
    total_supply: 1e11,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/2db5a2a6-c98e-4b80-35e0-31b489132100/logo"
  },
  {
    name: "Nostra",
    symbol: "NSTR",
    decimals: 18,
    l2_token_address: "0x00c530f2c0aa4c16a0806365b0898499fba372e5df7a7172dc6fe9ba777e8007",
    sort_order: 1,
    total_supply: 1e8,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/a45c2224-17a7-4269-ea7e-3924e9755800/logo"
  },
  {
    name: "Carmine",
    symbol: "CRM",
    decimals: 18,
    l2_token_address: "0x51c4b1fe3bf6774b87ad0b15ef5d1472759076e42944fff9b9f641ff13e5bbe",
    sort_order: 1,
    total_supply: 1e8,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/6ab817f1-8075-4a94-6e14-f112f1f89d00/logo"
  },
  {
    name: "Cash",
    symbol: "CASH",
    decimals: 18,
    l2_token_address: "0x498edfaf50ca5855666a700c25dd629d577eb9afccdf3b5977aec79aee55ada",
    sort_order: 3,
    total_supply: null,
    hidden: !1,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/6bd6d156-f509-4b51-5dfc-3ee566143600/logo"
  },
  {
    name: "Nums",
    symbol: "NUMS",
    decimals: 18,
    l2_token_address: "0xe5f10eddc01699dc899a30dbc3c9858148fa4aa0a47c0ffd85f887ffc4653e",
    sort_order: 1,
    total_supply: 1,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/90868d05-cb75-4c42-278c-5a540db2cf00/logo"
  },
  {
    name: "Flip",
    symbol: "FLIP",
    decimals: 18,
    l2_token_address: "0x01bfe97d729138fc7c2d93c77d6d1d8a24708d5060608017d9b384adf38f04c7",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/275f0fa8-a691-471c-ace6-0eb0315dde00/logo"
  },
  {
    name: "Eternum Stone",
    symbol: "STONE",
    decimals: 18,
    l2_token_address: "0x439a1c010e3e1bb2d43d43411000893c0042bd88f6c701611a0ea914d426da4",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/932e7f83-a4c2-40f0-3048-35af3b194100/logo"
  },
  {
    name: "Eternum Coal",
    symbol: "COAL",
    decimals: 18,
    l2_token_address: "0xce635e3f241b0ae78c46a929d84a9101910188f9c4024eaa7559556503c31a",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/cf2ee180-06bf-4443-e3aa-724d7c28e800/logo"
  },
  {
    name: "Eternum Wood",
    symbol: "WOOD",
    decimals: 18,
    l2_token_address: "0x40d8907cec0f7ae9c364dfb12485a1314d84c129bf1898d2f3d4b7fcc7d44f4",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/1db5f954-c1ef-447e-9f8f-05bd9f3b2b00/logo"
  },
  {
    name: "Eternum Copper",
    symbol: "COPPER",
    decimals: 18,
    l2_token_address: "0x66ed5c928ee027a9419ace1cbea8389885161db5572a7c5c4fef2310e9bf494",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/6bbcdcc9-6146-404d-9501-92a664cf3100/logo"
  },
  {
    name: "Eternum Ironwood",
    symbol: "IRONWOOD",
    decimals: 18,
    l2_token_address: "0x1720cf6318bff45e62acc588680ae3cd4d5f8465b1d52cb710533c9299b031a",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/5af7c03b-e4ae-4aee-eba4-a4e2160a1d00/logo"
  },
  {
    name: "Eternum Obsidian",
    symbol: "OBSIDIAN",
    decimals: 18,
    l2_token_address: "0x3b6448d09dcd023507376402686261f5d6739455fa02f804907b066e488da66",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/8be9bc66-486b-4181-6804-725a1db8ad00/logo"
  },
  {
    name: "Eternum Gold",
    symbol: "GOLD",
    decimals: 18,
    l2_token_address: "0xdff9dca192609c4e86ab3be22c7ec1e968876c992d21986f3c542be97fa2f",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/fb9e90f7-3c2f-4c64-7e43-c3f694f35e00/logo"
  },
  {
    name: "Eternum Silver",
    symbol: "SILVER",
    decimals: 18,
    l2_token_address: "0x6fe21d2d4a8a05bdb70f09c9250af9870020d5dcc35f410b4a39d6605c3e353",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/e443afeb-850b-46a0-a7ba-a473306d6b00/logo"
  },
  {
    name: "Eternum Mithral",
    symbol: "MITHRAL",
    decimals: 18,
    l2_token_address: "0x67ba235c569c23877064b2ac6ebd4d79f32d3c00f5fab8e28a3b5700b957f6",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/33dc517f-8a66-45eb-f2c5-de5388e47500/logo"
  },
  {
    name: "Eternum Alchemical Silver",
    symbol: "ALCHEMICALSILVER",
    decimals: 18,
    l2_token_address: "0x3956a5301e99522038a2e7dcb9c2a89bf087ffa79310ee0a508b5538efd8ddd",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/3d2e0fd8-4af8-49a0-4bdb-691a4d6ef800/logo"
  },
  {
    name: "Eternum Cold Iron",
    symbol: "COLDIRON",
    decimals: 18,
    l2_token_address: "0x555d713e59d4ff96b7960447e9bc9e79bfdeab5b0eea74e3df81bce61cfbc77",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/878c0d8a-8e2c-4281-0896-9cbbb2ef9400/logo"
  },
  {
    name: "Eternum Deep Crystal",
    symbol: "DEEPCRYSTAL",
    decimals: 18,
    l2_token_address: "0x1d655ac834d38df7921074fc1588411e202b1af83307cbd996983aff52db3a8",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/1c2c954f-448c-476b-a4a6-19b52efe3e00/logo"
  },
  {
    name: "Eternum Ruby",
    symbol: "RUBY",
    decimals: 18,
    l2_token_address: "0x3d9b66720959d0e7687b898292c10e62e78626f2dba5e1909961a2ce3f86612",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/6a45b34d-3bfe-4994-45b0-f2bee8abac00/logo"
  },
  {
    name: "Eternum Diamonds",
    symbol: "DIAMONDS",
    decimals: 18,
    l2_token_address: "0xe03ea8ae385f64754820af5c01c36abf1b8130dd6797d3fd9d430e4114e876",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/b1fa609d-8799-4754-cdea-ab69514ca700/logo"
  },
  {
    name: "Eternum Hartwood",
    symbol: "HARTWOOD",
    decimals: 18,
    l2_token_address: "0x5620aa7170cd66dbcbc37d03087bfe4633ffef91d3e4d97b501de906004f79b",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/27e37e85-91bd-4ee1-0552-1e0795077400/logo"
  },
  {
    name: "Eternum Ignium",
    symbol: "IGNIUM",
    decimals: 18,
    l2_token_address: "0x625c1f789b03ebebc7a9322366f38ebad1f693b84b2abd8cb8f5b2748b0cdd5",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/58591e20-24fb-4353-417a-81d877a5a200/logo"
  },
  {
    name: "Eternum Twilight Quartz",
    symbol: "TWILIGHTQUARTZ",
    decimals: 18,
    l2_token_address: "0x35e24c02409c3cfe8d5646399a62c4d102bb782938d5f5180e92c9c62d3faf7",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/2f8cb892-e82a-4af3-bd09-316061faec00/logo"
  },
  {
    name: "Eternum True Ice",
    symbol: "TRUEICE",
    decimals: 18,
    l2_token_address: "0x4485f5a6e16562e1c761cd348e63256d00389e3ddf4f5d98afe7ab44c57c481",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/fe4bfc17-6553-4dc5-58d2-f452b4aa8a00/logo"
  },
  {
    name: "Eternum Adamantine",
    symbol: "ADAMANTINE",
    decimals: 18,
    l2_token_address: "0x367f838f85a2f5e1580d6f011e4476f581083314cff8721ba3dda9706076eed",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/13bd026b-3612-480e-0119-04cf4c505a00/logo"
  },
  {
    name: "Eternum Sapphire",
    symbol: "SAPPHIRE",
    decimals: 18,
    l2_token_address: "0x2f8dd022568af8f9f718aa37707a9b858529db56910633a160456838b6cbcbc",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/0ebf555f-e732-4054-f8e5-55b2ed49ba00/logo"
  },
  {
    name: "Eternum Ethereal Silica",
    symbol: "ETHEREALSILICA",
    decimals: 18,
    l2_token_address: "0x68b6e23cbbd58a644700f55e96c83580921e9f521b6e5175396b53ba7910e7d",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/f02a5b43-bfcf-408c-7d1b-fcfe68b02d00/logo"
  },
  {
    name: "Eternum Dragon Hide",
    symbol: "DRAGONHIDE",
    decimals: 18,
    l2_token_address: "0x3bf856515bece3c93f5061b7941b8645f817a0acab93c758b8c7b4bc0afa3c6",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/e74955fc-5c8a-4dff-4882-a49a46a5a800/logo"
  },
  {
    name: "Eternum Ancient Fragment",
    symbol: "ANCIENTFRAGMENT",
    decimals: 18,
    l2_token_address: "0x0695b08ecdfdd828c2e6267da62f59e6d7543e690ef56a484df25c8566b332a5",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/9af855b7-4790-4390-9466-6bed4481ab00/logo"
  },
  {
    name: "Eternum Donkey",
    symbol: "DONKEY",
    decimals: 18,
    l2_token_address: "0x264be95a4a2ace20add68cb321acdccd2f9f8440ee1c7abd85da44ddab01085",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/20817378-a45e-4521-f464-10f6dd13c500/logo"
  },
  {
    name: "Eternum Knight",
    symbol: "KNIGHT",
    decimals: 18,
    l2_token_address: "0xac965f9e67164723c16735a9da8dbc9eb8e43b1bd0323591e87c056badf606",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/8787ed1f-af5c-4873-c01a-55f05e999a00/logo"
  },
  {
    name: "Eternum Crossbowman",
    symbol: "CROSSBOWMAN",
    decimals: 18,
    l2_token_address: "0x67e4ac00a241be06ba6afc11fa2715ec7da0c42c05a67ef6ecfcfeda725aaa8",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/dec7f31b-4b1d-46bb-4fca-c0253cf55a00/logo"
  },
  {
    name: "Eternum Paladin",
    symbol: "PALADIN",
    decimals: 18,
    l2_token_address: "0x3bc86299bee061c7c8d7546ccb62b9daf9bffc653b1508facb722c6593874bc",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/7d2cd5a5-f38a-49f6-11f8-ba3b59a59e00/logo"
  },
  {
    name: "Eternum Wheat",
    symbol: "WHEAT",
    decimals: 18,
    l2_token_address: "0x57a3f1ee475e072ce3be41785c0e889b7295d7a0dcc22b992c5b9408dbeb280",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/c338b6a8-77c4-4dd6-34f5-1af0d3fb1e00/logo"
  },
  {
    name: "Eternum Fish",
    symbol: "FISH",
    decimals: 18,
    l2_token_address: "0x27719173cfe10f1aa38d2aaed0a075b6077290f1e817aa3485d2b828394f4d9",
    sort_order: 1,
    total_supply: null,
    hidden: !0,
    logo_url: "https://imagedelivery.net/0xPAQaDtnQhBs8IzYRIlNg/6deef27f-df40-4248-4e1b-ed1d79a3f000/logo"
  },
  {
    name: "Fools",
    symbol: "FOOLS",
    decimals: 18,
    l2_token_address: "0x068a7a07e08fc3e723a878223d00f669106780d5ea6665eb15d893476d47bf3b",
    sort_order: 1,
    total_supply: null,
    logo_url: "https://assets.underware.gg/pistols/fools.svg"
  },
  {
    name: "Fame",
    symbol: "FAME",
    decimals: 18,
    l2_token_address: "0x02549653a4ae1ff8d04a20b8820a49cbe97486c536ec0e4c8f68aa33d80067cf",
    sort_order: 1,
    total_supply: null,
    logo_url: "https://assets.underware.gg/pistols/fame.svg"
  }
], ln = Se, gn = Xt, mn = Se.cartridge.theme;
export {
  pt as ArgentWallet,
  fn as FeeSource,
  gt as MetaMaskWallet,
  y as NotReadyToConnect,
  mt as PhantomWallet,
  ut as RabbyWallet,
  E as ResponseCodes,
  dn as TurnkeyWallet,
  ft as WalletBridge,
  pn as WalletConnectWallet,
  ln as controllerConfigs,
  an as default,
  mn as defaultTheme,
  gn as erc20Metadata,
  bn as humanizeString,
  cn as lookupAddresses,
  sn as lookupUsernames,
  yn as normalizeCalls,
  Te as parseChainId,
  Ne as toArray,
  wn as toSessionPolicies,
  vn as toWasmPolicies
};
//# sourceMappingURL=index.js.map
