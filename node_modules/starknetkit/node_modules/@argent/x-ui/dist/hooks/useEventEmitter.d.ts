import { DatalessEventNames, EventName, OmnipresentEventData, default as Emittery } from 'emittery';
import { FC, PropsWithChildren } from 'react';
interface EventEmitterContextProps {
    emitter: Emittery;
}
export declare const useEventEmitterContext: () => EventEmitterContextProps | null;
export declare const useIsEventEmitterEnabled: () => boolean;
interface EventEmitterProviderProps extends PropsWithChildren {
    emitter: Emittery;
}
/**
 * Provides the instance of Emittery used by the hooks
 *
 * @example
 *
 * import Emittery from "emittery"
 *
 * function Component() {
 *   const emitter = useRef(new Emittery()).current
 *   return (
 *     <EventEmitterProvider emitter={emitter}>
 *       ...
 *     </EventEmitterProvider>
 *   )
 * }
 *
 * // typed events using Symbol
 *
 * const EventNameFooBar = Symbol("EventNameFooBar")
 *
 * type Events = { [EventNameFooBar]: void }
 *
 * // emit an event
 *
 * const emitEvent = useEmitEvent<Events>()
 * emitEvent(EventNameFooBar, ...)
 *
 * // listen for an event
 *
 * const eventListener = useEventListener<Events>()
 * eventListener(EventNameFooBar, () => {
 *   ...
 * });
 */
export declare const EventEmitterProvider: FC<EventEmitterProviderProps>;
export declare const useEventEmitter: <EventData = Record<PropertyKey, unknown>, AllEventData = EventData & OmnipresentEventData, DatalessEvents = DatalessEventNames<EventData>>() => Emittery<EventData, AllEventData, DatalessEvents> | undefined;
/**
 * Provides a typed event emitter - uses emitter.emit
 *
 * @example
 *
 * const emitEvent = useEmitEvent<Events>()
 * emitEvent(EventNameFooBar, ...)
 */
export declare const useEmitEvent: <EventData = Record<PropertyKey, unknown>>() => (...args: any[]) => void;
/**
 * Provides a typed event listener - uses emitter.on and automatically unsubscribes
 *
 * @example
 *
 * const eventListener = useEventListener<Events>()
 * eventListener(EventNameFooBar, () => {
 *   ...
 * });
 */
export declare const useEventListener: <EventData = Record<PropertyKey, unknown>, AllEventData = EventData & OmnipresentEventData>() => <Name extends keyof AllEventData>(eventName: Name | readonly Name[], listener: (eventData: AllEventData[Name]) => void) => void;
export {};
