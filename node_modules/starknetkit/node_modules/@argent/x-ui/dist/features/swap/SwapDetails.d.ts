import { IconButtonProps, ChakraProps } from '@chakra-ui/react';
import { PropsWithChildren, ReactNode } from 'react';
interface ItemPropertyProps {
    tooltipLabel?: string;
}
interface ItemValueProps {
    buttonProps?: IconButtonProps;
}
interface ItemProps {
    alert?: string;
}
declare function SwapDetails({ children, ...props }: PropsWithChildren<ChakraProps>): import("react").JSX.Element;
declare namespace SwapDetails {
    var Header: ({ children, ...props }: PropsWithChildren<ChakraProps>) => import("react").JSX.Element;
    var Body: ({ children, ...props }: PropsWithChildren<ChakraProps>) => import("react").JSX.Element;
    var Item: ({ children, alert, ...props }: PropsWithChildren<ChakraProps & ItemProps>) => import("react").JSX.Element;
    var ItemProperty: ({ children, tooltipLabel, ...props }: PropsWithChildren<ChakraProps & ItemPropertyProps>) => import("react").JSX.Element;
    var ItemValue: ({ children, buttonProps, ...props }: PropsWithChildren<ChakraProps & ItemValueProps>) => import("react").JSX.Element;
    var Default: ({ header, items, }: SwapDetailsDefaultProps) => import("react").JSX.Element;
}
type SwapDetailsDefaultProps = {
    header: {
        primary: {
            property: string;
            value: string;
        };
        secondary: {
            property: string;
            icon?: ReactNode;
        };
    };
    items: ({
        property: string;
        value: string;
    } & ItemPropertyProps & ItemValueProps & ItemProps)[];
};
export type { SwapDetailsDefaultProps };
export { SwapDetails };
