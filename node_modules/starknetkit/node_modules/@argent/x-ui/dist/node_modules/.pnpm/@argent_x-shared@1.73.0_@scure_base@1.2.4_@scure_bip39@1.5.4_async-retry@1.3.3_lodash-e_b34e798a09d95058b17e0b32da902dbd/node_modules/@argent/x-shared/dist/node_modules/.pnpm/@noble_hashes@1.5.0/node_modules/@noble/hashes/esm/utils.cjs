"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const r=require("./_assert.cjs");/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */const f=e=>new Uint32Array(e.buffer,e.byteOffset,Math.floor(e.byteLength/4)),i=new Uint8Array(new Uint32Array([287454020]).buffer)[0]===68,o=e=>e<<24&4278190080|e<<8&16711680|e>>>8&65280|e>>>24&255;function y(e){for(let t=0;t<e.length;t++)e[t]=o(e[t])}const a=Array.from({length:256},(e,t)=>t.toString(16).padStart(2,"0"));function l(e){r.bytes(e);let t="";for(let n=0;n<e.length;n++)t+=a[e[n]];return t}function u(e){if(typeof e!="string")throw new Error(`utf8ToBytes expected string, got ${typeof e}`);return new Uint8Array(new TextEncoder().encode(e))}function s(e){return typeof e=="string"&&(e=u(e)),r.bytes(e),e}class b{clone(){return this._cloneInto()}}function g(e){const t=c=>e().update(s(c)).digest(),n=e();return t.outputLen=n.outputLen,t.blockLen=n.blockLen,t.create=()=>e(),t}exports.Hash=b;exports.byteSwap=o;exports.byteSwap32=y;exports.bytesToHex=l;exports.isLE=i;exports.toBytes=s;exports.u32=f;exports.utf8ToBytes=u;exports.wrapConstructor=g;
