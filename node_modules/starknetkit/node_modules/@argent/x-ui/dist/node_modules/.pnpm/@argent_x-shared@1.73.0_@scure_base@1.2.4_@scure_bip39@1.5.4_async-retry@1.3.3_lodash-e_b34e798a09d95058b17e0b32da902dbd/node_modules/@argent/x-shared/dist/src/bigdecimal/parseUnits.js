const d = (e) => /^(-?\d+\.?\d*|\.\d+)[eE]([+-]?\d+)$/.test(e), o = (e) => {
  if (!d(e))
    throw new Error("Invalid scientific notation");
  const [t, a] = e.toLowerCase().split("e"), n = parseInt(a, 10), i = t.indexOf("."), c = t.replace(".", "").replace("-", ""), s = t.startsWith("-");
  let r = c, l = i === -1 ? 0 : t.length - i - 1;
  return n > 0 ? r = r.padEnd(r.length + n, "0") : n < 0 && (l += Math.abs(n)), r = r.replace(/^0+/, "") || "0", {
    value: BigInt(`${s ? "-" : ""}${r}`),
    decimals: l
  };
}, g = (e, t) => {
  if (d(e))
    return o(e);
  const [a, n = ""] = e.split("."), i = a.startsWith("-"), c = i ? a.slice(1) : a, s = t ?? n.length, r = n.slice(0, s), l = n.length > t ? p(r, n[t]) : r.padEnd(s, "0");
  return {
    value: BigInt(`${i ? "-" : ""}${c}${l}`),
    decimals: s
  };
}, p = (e, t) => Number(t) >= 5 ? (BigInt(e) + 1n).toString().padStart(e.length, "0") : e;
export {
  g as parseUnits
};
