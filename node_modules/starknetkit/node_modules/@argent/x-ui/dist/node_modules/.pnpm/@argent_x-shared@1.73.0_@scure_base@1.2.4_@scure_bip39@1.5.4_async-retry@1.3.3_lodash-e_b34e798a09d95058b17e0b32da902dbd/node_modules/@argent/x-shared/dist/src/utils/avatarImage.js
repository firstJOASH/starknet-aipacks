import { num as s } from "starknet";
import { id as g } from "./id.js";
import { getInitials as d } from "./initials.js";
const { toBigInt: m } = s, i = (t) => {
  const e = t.replace("#", "");
  if (!/^[0-9A-F]{6}$/i.test(e))
    throw new Error(`Invalid color ${t}`);
  return `#${e}`;
}, f = (t, e) => {
  const r = i(e.background), o = i(e.color ?? "#ffffff"), a = d(t, !0), n = `<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48">
    <rect width="48" height="48" fill="${r}" />
    <text x="50%" y="54%" dominant-baseline="middle" text-anchor="middle" font-size="16" font-family="Barlow, Helvetica, Arial, sans-serif" fill="${o}">${a}</text>
  </svg>`;
  return `data:image/svg+xml;base64,${btoa(n)}`;
}, c = [
  "02BBA8",
  "29C5FF",
  "0078A4",
  "FFBF3D",
  "FFA85C",
  "FF875B",
  "FF675C",
  "FF5C72"
], u = (t) => {
  const e = g(t).slice(-2), r = parseInt(e, 16) % c.length;
  return c[r];
}, F = (t) => {
  try {
    return s.toHex(m(s.hexToDecimalString(t)));
  } catch {
  }
  return "";
}, x = ({ accountName: t, networkId: e, accountAddress: r, backgroundColor: o }) => {
  const a = F(r), n = `${e}::${a}`, l = o || u(n);
  return f(t, { background: l });
};
export {
  f as generateAvatarImage,
  u as getColor,
  x as getNetworkAccountImageUrl,
  F as stripAddressZeroPadding
};
