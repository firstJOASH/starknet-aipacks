import { BigNumber as d } from "../../../node_modules/.pnpm/bignumber.js@9.1.2/node_modules/bignumber.js/bignumber.js";
import { isNumeric as w } from "./isNumeric.js";
const S = {
  CURRENCY: {
    minDecimalPlaces: 2,
    maxDecimalPlaces: 10,
    minDecimalSignificantDigits: 2,
    decimalPlacesWhenZero: 2,
    allowLeadingZerosInDecimalPart: !0,
    groupSeparator: ",",
    decimalSeparator: "."
  },
  TOKEN: {
    minDecimalPlaces: 4,
    maxDecimalPlaces: 16,
    minDecimalSignificantDigits: 2,
    decimalPlacesWhenZero: 1,
    allowLeadingZerosInDecimalPart: !0,
    groupSeparator: ",",
    decimalSeparator: "."
  }
}, O = (i, r) => h(i, {
  ...S.CURRENCY
}), Z = (i, r) => h(i, {
  ...S.TOKEN,
  ...r || {}
}), R = {
  groupSize: 3,
  decimalSeparator: ".",
  groupSeparator: ","
}, h = (i, { minDecimalPlaces: r, maxDecimalPlaces: D, minDecimalSignificantDigits: C, decimalPlacesWhenZero: p, allowLeadingZerosInDecimalPart: N, groupSeparator: g, decimalSeparator: c = R.decimalSeparator, maxNrDigits: s, roundingMode: l } = S.CURRENCY) => {
  if (!w(i))
    return null;
  const o = {
    ...R,
    groupSeparator: g,
    decimalSeparator: c
  }, a = new d(typeof i == "bigint" ? i.toString() : i);
  let n;
  const F = `0.${"".padStart(p - 1, "0")}1`;
  if (a.lt(new d(F)) && !N)
    n = `0.${"".padStart(p, "0")}`;
  else if (a.gte(1))
    n = r !== 0 ? l ? a.toFormat(r, l, o) : a.toFormat(r, o) : a.toFormat(r, d.ROUND_FLOOR, o);
  else {
    const t = (l ? a.toFormat(D, l, o) : a.toFormat(D, o)).split(c)[1].match(/^0+/), u = N && t && t.length ? t[0].length : 0, m = Math.max(u + C, r);
    n = l ? a.toFormat(m, l, o) : a.toFormat(m, o);
  }
  const [f, x] = n.split(c);
  let e = f;
  if (x) {
    const t = x.replace(/0+$/, "");
    e += t ? `.${t}` : "";
  }
  const P = 1 + n.indexOf(".") + p;
  if (e.length < P && (e = n.substring(0, P)), s) {
    const t = e.replace(new RegExp(`[${g}${c}]`, "g"), "").length;
    if (f.replace(new RegExp(`[${g}]`, "g"), "").length > s)
      e = f;
    else if (t > s) {
      const u = t - s, m = e.indexOf(c);
      if (m !== -1) {
        const b = Math.max(0, e.length - m - 1 - u);
        e = e.substring(0, m + 1 + b);
      }
    }
  }
  return e;
};
export {
  O as prettifyCurrencyNumber,
  h as prettifyNumber,
  S as prettifyNumberConfig,
  Z as prettifyTokenNumber
};
