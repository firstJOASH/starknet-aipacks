"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const m=require("lodash-es"),o=require("starknet"),a=require("zod"),$=require("../../utils/base58.cjs"),f=a.z.string().refine(e=>{if(e.toLowerCase()===e)return!0;try{return o.validateChecksumAddress(e)&&v(e)}catch{}return!1},{message:"Invalid address (checksum error)"});a.z.string().refine(e=>{try{return o.validateAndParseAddress(e)}catch{}return!1},{message:"Invalid address (validation error)"});const d=a.z.string().regex(/^0x[0-9a-fA-F]+$/,"Invalid address"),h=d.min(50,"Address must at least be 50 characters long").max(66,"Address must at most be 66 characters long");d.length(66,"Address must be 66 characters long");const l=h.pipe(f).transform(e=>`0x${(e.startsWith("0x")?e.slice(2):e).padStart(64,"0")}`);l.or(a.z.literal("")).transform(e=>e===""?void 0:e).optional();d.transform(e=>`0x${e.replace(/^0x/,"").toLowerCase().padStart(64,"0")}`);const g=e=>l.safeParse(e).success,A=g,u=e=>o.getChecksumAddress(e),x=e=>{if(!e)return!1;try{const r=$.decodeBase58(e);return A(r)}catch{return!1}},p=e=>{const r=u(e),s=r.slice(0,2),t=r.slice(2,6),n=r.slice(-4);return`${s}${t}…${n}`},S=e=>{const r=u(e),s=r.slice(0,2),t=r.slice(2).match(/.{1,4}/g)||[];return`${s} ${t.join(" ")}`},v=e=>!/^0x[0-9a-f]{63,64}$/.test(e),c=e=>e.toLowerCase().replace(/^[0x]+/,""),i=e=>{try{return/^(0x)?[0-9a-f]+$/i.test(e)}catch{}return!1},y=(e,r)=>{try{return!e||!r||!i(e)||!i(r)?!1:c(e)===c(r)}catch{}return!1},z=m.memoize(e=>{const r=e.slice(0,6),s=e.slice(-4);return`${r}…${s}`});m.memoize((e,r)=>{if(e.length<r)return e;const s=Math.floor((r-1)/2),t=e.slice(0,s),n=e.slice(-s);return`${t}…${n}`});exports.addressSchema=l;exports.addressSchemaBase=d;exports.addressSchemaLooseLength=h;exports.formatFullAddress=S;exports.formatTruncatedAddress=p;exports.formatTruncatedSignerKey=z;exports.isAddress=g;exports.isBase58Address=x;exports.isEqualAddress=y;exports.isValidAddress=A;exports.isValidHexString=i;exports.normalizeAddress=u;exports.normalizeAddressForCompare=c;exports.validChecksumAddressSchema=f;
