import { accordionAnatomy as l } from "@chakra-ui/anatomy";
import { createMultiStyleConfigHelpers as i } from "@chakra-ui/react";
import { buttonHoverStyle as t, buttonBaseStyle as n } from "./buttonTheme.js";
import { typographyStyles as r } from "./typographyStyles.generated.js";
const { definePartsStyle: o, defineMultiStyleConfig: d } = i(l.keys), s = o((a) => {
  const { colorScheme: e } = a;
  return e === "error" ? {
    container: {
      bg: "error.900",
      borderRadius: "lg",
      color: "error.500",
      border: "none",
      overflow: "hidden"
    },
    panel: {
      color: "error.300"
    },
    icon: {
      color: "white"
    },
    button: {
      boxShadow: n.boxShadow,
      bg: "error.500",
      color: "white",
      _hover: t
    }
  } : e === "neutrals" ? {
    container: {
      bg: "transparent",
      borderRadius: "lg",
      border: "none",
      overflow: "hidden"
    },
    panel: {
      color: "text-primary",
      mt: "1px",
      bg: "surface-elevated"
    },
    icon: {
      color: "text-primary"
    },
    button: {
      boxShadow: n.boxShadow,
      bg: "surface-elevated",
      color: "text-primary",
      _hover: t
    }
  } : {
    container: {
      border: "solid 1px",
      borderRadius: "lg",
      color: "neutrals.700"
    },
    panel: {
      color: "text-primary"
    },
    icon: {
      color: "text-primary"
    },
    button: {
      color: "text-primary"
    }
  };
}), c = o({
  root: {
    _notFirst: {
      mt: 2
    }
  },
  container: {
    bg: "transparent",
    border: "none",
    overflow: "hidden",
    borderRadius: 0
  },
  button: {
    ...r.P3,
    fontWeight: "normal",
    color: "text-secondary",
    padding: 0
  },
  panel: {
    padding: 0,
    borderLeft: "2px solid",
    borderLeftColor: "neutrals.100",
    pl: 2.5,
    mt: 2,
    _dark: {
      borderLeftColor: "neutrals.500"
    }
  }
}), b = {
  base: o({}),
  sm: o({
    button: {
      p: 3,
      ...r.L1Bold
    },
    panel: {
      p: 3,
      ...r.P3
    }
  })
}, y = d({
  baseStyle: s,
  sizes: b,
  variants: {
    nested: c
  },
  defaultProps: {
    size: "base"
  }
});
export {
  y as accordionTheme
};
