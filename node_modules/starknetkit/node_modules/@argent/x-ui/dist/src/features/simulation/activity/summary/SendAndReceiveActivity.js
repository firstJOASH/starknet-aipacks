import { jsx as t, jsxs as c, Fragment as y } from "react/jsx-runtime";
import { isEmpty as f, groupBy as h } from "lodash-es";
import { useTranslation as x } from "react-i18next";
import { ActivitySummaryRow as a } from "../row/ActivitySummaryRow.js";
import { ActivitySummaryStack as A } from "./ActivitySummaryStack.js";
import { B3 as R, L1Bold as p } from "../../../../components/typography.generated.js";
const E = ({ summaryArray: r, networkId: o, hideComponent: d, dappLogoUrl: s, ...l }) => {
  const { t: i } = x();
  if (f(r))
    return /* @__PURE__ */ t(A, { ...l, children: /* @__PURE__ */ t(R, { color: "text-secondary", textAlign: "center", py: 1, children: i("sendAndReceiveActivity.noBalanceChange") }) });
  const { send: m, receive: v } = h(r, (e) => e.sent ? "send" : "receive");
  return /* @__PURE__ */ c(A, { ...l, children: [
    m && /* @__PURE__ */ c(y, { children: [
      /* @__PURE__ */ t(p, { color: "text-secondary", children: i("sendAndReceiveActivity.send") }),
      m.map((e, n) => /* @__PURE__ */ t(a, { summary: e, networkId: o, hideComponent: d, dappLogoUrl: s }, `send-${n}-${e.asset.type}`))
    ] }),
    v && /* @__PURE__ */ c(y, { children: [
      /* @__PURE__ */ t(p, { color: "text-secondary", children: i("sendAndReceiveActivity.receive") }),
      v.map((e, n) => /* @__PURE__ */ t(a, { summary: e, networkId: o, hideComponent: d, dappLogoUrl: s }, `send-${n}-${e.asset.type}`))
    ] })
  ] });
};
export {
  E as SendAndReceiveActivity
};
