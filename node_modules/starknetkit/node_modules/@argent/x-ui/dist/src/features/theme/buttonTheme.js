import { defineStyleConfig as a } from "@chakra-ui/react";
import { mode as i } from "@chakra-ui/theme-tools";
import { typographyStyles as r } from "./typographyStyles.generated.js";
const o = {
  bg: null,
  boxShadow: "inset 0 0 0 50vh var(--chakra-colors-surface-transparent)"
}, e = {
  boxShadow: "inset 0 0 0 50vh var(--chakra-colors-transparent)",
  _hover: {
    ...o
  },
  _active: {
    ...o,
    transform: "scale(0.99)"
  }
}, u = a({
  baseStyle: (t) => ({
    ...e,
    display: "flex",
    alignIitems: "center",
    justifyContent: "center",
    outline: "none",
    border: "none",
    textAlign: "center",
    rounded: "full",
    cursor: "pointer",
    _disabled: {
      pointerEvents: "none"
    },
    _focusVisible: {
      boxShadow: i("outline-accent", "outline")(t)
    }
  }),
  sizes: {
    auto: {},
    large: {
      ...r.B1,
      px: 9,
      py: 2,
      minHeight: 12
    },
    medium: {
      ...r.B2,
      px: 3,
      py: 1,
      minHeight: 8
    },
    small: {
      ...r.B3,
      px: 3,
      py: 1,
      minHeight: 6.5
    },
    /** @deprecated */
    "3xs": {
      ...r.B3,
      px: "1.5",
      py: 0
    },
    /** @deprecated */
    "2xs": {
      ...r.B3,
      minHeight: 8,
      px: 3,
      py: 1
    },
    /** @deprecated */
    xs: {
      ...r.B3,
      minHeight: 9,
      px: 4,
      py: 1
    },
    /** @deprecated */
    sm: {
      ...r.B3,
      minHeight: 10,
      px: 5,
      py: 2,
      ".chakra-button__icon": {
        fontSize: "base"
      }
    },
    /** @deprecated */
    md: {
      ...r.B2,
      minHeight: 12,
      px: 6,
      py: 2
    },
    /** @deprecated */
    lg: {
      ...r.B1,
      minHeight: 14,
      px: 8,
      py: 2
    }
  },
  variants: {
    outline: {},
    solid: (t) => {
      const { colorScheme: n } = t;
      switch (n) {
        case "default":
          return {
            ...e,
            bg: "surface-elevated",
            color: "text-primary"
          };
        case "primary":
          return {
            ...e,
            bg: "button-primary",
            color: "white.white"
          };
        case "secondary":
          return {
            ...e,
            bg: "button-secondary",
            color: "text-primary"
          };
        case "inverted":
          return {
            ...e,
            bg: "surface-inverted",
            color: "surface-match-mode"
          };
        case "info":
          return {
            ...e,
            bg: "button-info",
            color: "white.white"
          };
        case "warning":
          return {
            ...e,
            bg: "button-warning",
            color: "white.white"
          };
        case "danger":
          return {
            ...e,
            bg: "surface-danger-vibrant",
            color: "white.white"
          };
        case "neutrals-danger":
          return {
            ...e,
            bg: "surface-elevated",
            color: "button-danger"
          };
        case "transparent":
          return {
            ...e,
            bg: "transparent",
            color: "surface-inverted"
          };
        case "inverted-primary":
          return {
            ...e,
            bg: "transparent",
            border: "solid",
            borderColor: "primary.500",
            color: "primary.500"
          };
      }
      return {
        ...e,
        bg: `${n}.500`,
        color: "white"
      };
    }
  },
  defaultProps: {
    /** "md" is deprecated - TODO: refactor and default to "large" */
    size: "md",
    variant: "solid",
    colorScheme: "default"
  }
});
export {
  e as buttonBaseStyle,
  o as buttonHoverStyle,
  u as buttonTheme
};
