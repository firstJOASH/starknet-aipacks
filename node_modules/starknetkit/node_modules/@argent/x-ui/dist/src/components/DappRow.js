import { jsx as r, jsxs as t } from "react/jsx-runtime";
import { useDappId as m } from "../features/providers/DappProvider.js";
import { Flex as o, Link as f, Button as w } from "@chakra-ui/react";
import { useTranslation as h } from "react-i18next";
import { DappIcon as u } from "./DappIcon.js";
import "./Typography.js";
import { H5 as x, P4 as g } from "./typography.generated.js";
const b = ({ dappId: n, dappUrl: l, networkId: v, onDisconnect: i, iconSize: p = 8, fallbackName: a, children: c, ...s }) => {
  const { t: d } = h(), e = m(n);
  return /* @__PURE__ */ r(o, { px: 4, py: 3.5, minHeight: 18, rounded: "xl", w: "full", bgColor: "surface-elevated", justifyContent: "space-between", alignItems: "center", ...s, children: /* @__PURE__ */ t(o, { gap: 3, alignItems: "center", w: "full", children: [
    /* @__PURE__ */ r(u, { size: p, dappId: n }),
    /* @__PURE__ */ t(o, { gap: 0.5, overflow: "hidden", direction: "column", children: [
      /* @__PURE__ */ r(x, { textOverflow: "ellipsis", overflow: "hidden", whiteSpace: "nowrap", children: (e == null ? void 0 : e.name) || a || "Unknown dapp" }),
      (e == null ? void 0 : e.dappUrl) && /* @__PURE__ */ r(g, { as: f, isExternal: !0, href: e.dappUrl, color: "text-secondary", textOverflow: "ellipsis", overflow: "hidden", whiteSpace: "nowrap", children: e.dappUrl })
    ] }),
    /* @__PURE__ */ t(o, { gap: 1, alignItems: "center", ml: "auto", children: [
      i && /* @__PURE__ */ r(w, { colorScheme: "primary", size: "small", "data-testid": `disconnect-${l}`, onClick: i, children: d("dappRow.disconnect") }),
      c
    ] })
  ] }) });
};
export {
  b as DappRow
};
