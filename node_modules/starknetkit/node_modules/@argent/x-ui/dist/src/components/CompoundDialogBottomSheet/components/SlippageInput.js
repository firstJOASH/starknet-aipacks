import { jsxs as m, Fragment as f, jsx as i } from "react/jsx-runtime";
import x from "../../../features/icons/MinusPrimaryIcon.js";
import b from "../../../features/icons/PlusPrimaryIcon.js";
import { Flex as s, IconButton as u, InputGroup as S, Input as I, Box as y, Button as w } from "@chakra-ui/react";
import { useState as C } from "react";
import { useTranslation as W } from "react-i18next";
import { Header as k, Content as v, Footer as z } from "./base.js";
function h(n, r) {
  return n < r.min || n > r.max;
}
function d(n, r, o) {
  const t = Number.isNaN(n) ? 0 : n, e = Math.round(r ? t + o.step : t - o.step);
  return h(e, o) ? t : e;
}
function H({ onSave: n, value: r, options: o }) {
  const { t } = W(), e = o || {
    multiplier: 100,
    min: 0,
    max: 50 * 100,
    step: 10
  }, [l, p] = C(r), g = h(l, e);
  return /* @__PURE__ */ m(f, { children: [
    /* @__PURE__ */ i(k, { leftAligned: !0, children: t("slippageInput.editSlippage") }),
    /* @__PURE__ */ i(v, { children: /* @__PURE__ */ i(s, { width: "100%", direction: "column", gap: "6", children: /* @__PURE__ */ m(s, { width: "100%", gap: "3", children: [
      /* @__PURE__ */ i(u, { "aria-label": t("slippageInput.decreaseSlippage"), minWidth: "12", colorScheme: "secondary", isDisabled: l <= e.min, onClick: () => p((a) => d(a, !1, e)), children: /* @__PURE__ */ i(x, {}) }),
      /* @__PURE__ */ m(S, { as: s, alignItems: "center", justifyContent: "center", textAlign: "center", height: "auto", minHeight: "auto", borderRadius: "full", borderWidth: "1px", borderColor: "stroke-default-web", py: "1", px: "3", fontSize: "20px", fontWeight: "500", bg: "surface-elevated", children: [
        /* @__PURE__ */ i(I, { type: "number", placeholder: "0", p: "0", border: "none", height: "auto", minHeight: "auto", textAlign: "center", fontSize: "inherit", fontWeight: "inherit", bg: "inherit", width: "5ch", ml: "1.5ch", step: e.step / e.multiplier, min: e.min, max: e.max, value: l / e.multiplier, onChange: (a) => {
          let c = parseFloat(a.target.value) * e.multiplier;
          c = Math.min(Math.round(c), e.max), p(c);
        }, _focusVisible: {
          outline: "none",
          boxShadow: "none"
        } }),
        /* @__PURE__ */ i(y, { color: "text-primary", fontSize: "inherit", fontWeight: "inherit", children: "%" })
      ] }),
      /* @__PURE__ */ i(u, { "aria-label": t("slippageInput.increaseSlippage"), minWidth: "12", colorScheme: "secondary", isDisabled: l >= e.max, onClick: () => p((a) => d(a, !0, e)), children: /* @__PURE__ */ i(b, {}) })
    ] }) }) }),
    /* @__PURE__ */ i(z, { children: /* @__PURE__ */ i(w, { colorScheme: "primary", onClick: () => n(l), isDisabled: g, children: t("slippageInput.save") }) })
  ] });
}
export {
  H as SlippageInput
};
