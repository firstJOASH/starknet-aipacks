import { jsxs as f, Fragment as y, jsx as r } from "react/jsx-runtime";
import S from "../../features/icons/CrossPrimaryIcon.js";
import g from "../../features/icons/SearchPrimaryIcon.js";
import { useColorModeValue as I, Box as C, Text as k, Flex as F, IconButton as _, Input as z } from "@chakra-ui/react";
import { useRef as j, useState as m, useEffect as B } from "react";
import { useTranslation as H } from "react-i18next";
import { SearchError as T } from "./components.js";
function M({ onChange: o, onReset: l, onRefChange: t, error: b, detachedError: x, initValue: h = "", variant: w = "normal", ...v }) {
  const { t: s } = H(), n = j(null), [a, i] = m(h);
  B(() => {
    n.current && t && t(n);
  }, [t]);
  const [c, u] = m(!0), d = I("neutrals.400", "neutrals.300"), e = w === "rounded";
  return /* @__PURE__ */ f(y, { children: [
    /* @__PURE__ */ f(C, { position: "relative", w: "100%", role: "group", onFocus: () => u(!0), onBlur: () => u(!1), children: [
      /* @__PURE__ */ r(k, { position: "absolute", top: "50%", left: "4", transform: "translateY(-50%)", fontSize: "base", zIndex: 10, color: d, children: /* @__PURE__ */ r(g, { color: c || e ? "text-primary" : d, w: "5", h: "5" }) }),
      a && l && /* @__PURE__ */ r(F, { as: _, alignItems: "center", justifyContent: "center", "aria-label": s("index.clearSearch"), bg: "transparent", variant: "unstyled", position: "absolute", border: "solid 1px", borderColor: "transparent", right: "3", top: "50%", transform: "translateY(-50%)", _hover: {
        bgColor: "surface-elevated-web"
      }, _focus: {
        top: "50%",
        transform: "translateY(-50%)"
      }, zIndex: 10, cursor: "pointer", color: "currentColor", h: "8", w: "8", p: "1.5", minW: "8", minH: "8", onClick: () => {
        i(""), l();
      }, children: /* @__PURE__ */ r(S, { w: "4", h: "4" }) }),
      /* @__PURE__ */ r(z, { ref: n, type: "text", autoComplete: "off", background: "surface-elevated-web", minH: "11", noOfLines: 1, placeholder: s("index.search"), rounded: e ? "full" : "lg", _placeholder: {
        color: e ? "secondary-web" : "text-subtle",
        fontSize: "16px",
        fontWeight: "500",
        lineHeight: "20px",
        letterSpacing: "0em",
        textOverflow: "ellipsis"
      }, _hover: {
        border: "solid 1px",
        borderColor: "stroke-default-web"
      }, _focus: {
        boxShadow: "none",
        outline: "none",
        background: "surface-elevated",
        border: "1px solid",
        borderColor: e ? "white" : "stroke-default-web",
        color: e ? "text-primary" : "text-subtle"
      }, borderColor: "transparent", px: "12", ...v, onChange: (p) => {
        i(p.target.value), o == null || o(p);
      }, value: a })
    ] }),
    /* @__PURE__ */ r(T, { detachedError: x, error: b, isFocused: c })
  ] });
}
export {
  M as WebSearchInput
};
