import { jsx as o, jsxs as a, Fragment as x } from "react/jsx-runtime";
import u from "../../features/icons/NoShieldSecondaryIcon.js";
import g from "../../features/icons/ShieldPrimaryIcon.js";
import m from "../../features/icons/ShieldSecondaryIcon.js";
import { Flex as l } from "@chakra-ui/react";
import { useMemo as c } from "react";
import { useTranslation as d } from "react-i18next";
import "../Typography.js";
import { usePasswordStrengthIndicatorContext as i } from "./context.js";
import { L1Bold as h, L2Bold as f } from "../typography.generated.js";
const k = ({ ...n }) => {
  const t = i(), { t: e } = d(), r = c(() => t === null ? null : t < 3 ? {
    bgColor: "surface-danger-default",
    textColor: "text-danger",
    label: e("passwordStrengthIndicator.tooWeak"),
    icon: /* @__PURE__ */ o(u, { w: 4, h: 4 })
  } : t === 3 ? {
    bgColor: "surface-success-default",
    textColor: "text-success",
    label: e("passwordStrengthIndicator.good"),
    icon: /* @__PURE__ */ o(m, { w: 4, h: 4 })
  } : {
    bgColor: "surface-success-default",
    textColor: "text-success",
    label: e("passwordStrengthIndicator.excellent"),
    icon: /* @__PURE__ */ o(g, { w: 4, h: 4 })
  }, [t, e]);
  return r ? /* @__PURE__ */ a(l, { px: 2, py: 1, bg: r.bgColor, color: r.textColor, rounded: "md", width: "fit-content", alignItems: "center", ...n, children: [
    r.icon,
    /* @__PURE__ */ o(h, { ml: 1, children: r.label })
  ] }) : null;
}, L = ({ ...n }) => {
  const t = i(), { t: e } = d(), r = c(() => {
    if (t === null)
      return {
        label: e("passwordStrengthIndicator.passwordMustContainAtLeast8Characters"),
        bgColor: "surface-transparent",
        textColor: "text-secondary"
      };
    if (t < 3)
      return {
        label: e("passwordStrengthIndicator.thisIsAWweakPasswordTryAStrongerOne"),
        bgColor: "surface-danger-default",
        textColor: "text-danger-accessible"
      };
    if (t === 3)
      return {
        label: e("passwordStrengthIndicator.makeYourPasswordStrongerWithAFewMoreCharacters"),
        bgColor: "surface-transparent",
        textColor: "text-secondary"
      };
  }, [t, e]);
  return /* @__PURE__ */ o(x, { children: r && /* @__PURE__ */ o(f, { bg: r.bgColor, color: r.textColor, px: 4, py: 3, rounded: "md", ...n, children: r.label }) });
}, W = ({ ...n }) => {
  const t = i(), { t: e } = d(), r = c(() => t === null ? {
    comment: e("passwordStrengthIndicator.passwordMustContainAtLeast8Characters"),
    bgColor: "surface-transparent",
    textColor: "text-secondary"
  } : t < 3 ? {
    bgColor: "surface-danger-default",
    labelTextColor: "text-danger",
    label: e("passwordStrengthIndicator.tooWeak"),
    commentTextColor: "text-danger-accessible",
    comment: e("passwordStrengthIndicator.thisIsAWweakPasswordTryAStrongerOne"),
    icon: /* @__PURE__ */ o(u, { w: 4, h: 4, color: "icon-danger" })
  } : t === 3 ? {
    bgColor: "surface-success-default",
    labelTextColor: "text-success",
    label: e("passwordStrengthIndicator.good"),
    comment: e("passwordStrengthIndicator.makeYourPasswordStrongerWithAFewMoreCharacters"),
    commentTextColor: "text-success-accessible",
    icon: /* @__PURE__ */ o(m, { w: 4, h: 4, color: "icon-success" })
  } : {
    bgColor: "surface-success-default",
    textColor: "text-success",
    label: e("passwordStrengthIndicator.excellent"),
    gap: 1,
    icon: /* @__PURE__ */ o(g, { w: 4, h: 4, color: "icon-success" })
  }, [t, e]);
  if (!r)
    return null;
  const s = t && t > 3;
  return /* @__PURE__ */ a(l, { px: s ? 2 : 4, py: s ? 1 : 3, gap: r.gap ?? 3, bg: r.bgColor, rounded: "md", width: s ? "fit-content" : "full", alignItems: "center", ...n, children: [
    r.icon,
    /* @__PURE__ */ a(l, { flexDirection: "column", children: [
      /* @__PURE__ */ o(h, { color: r.textColor ?? r.labelTextColor, children: r.label }),
      /* @__PURE__ */ o(f, { color: r.textColor ?? r.commentTextColor, children: r.comment })
    ] })
  ] });
};
export {
  L as PasswordStrengthIndicatorComment,
  k as PasswordStrengthIndicatorLabel,
  W as PasswordStrengthIndicatorLabelAndComment
};
