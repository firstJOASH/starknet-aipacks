import { jsxs as m, jsx as l } from "react/jsx-runtime";
import { SimpleGrid as v, Box as x, InputGroup as S, InputLeftAddon as w, Input as g } from "@chakra-ui/react";
import { wordlist as D } from "@scure/bip39/wordlists/english";
import { useRef as z, useState as y, useCallback as W, useMemo as j } from "react";
import { generateFakeWords as C } from "./generateFakeWords.js";
const E = ({ length: s = 12, onChange: i, value: u, ...I }) => {
  const p = z(new Array(s).fill(null)), [d, f] = y(null), [a, b] = y(u ? u.split(" ") : [...Array(s)].map(() => "")), c = W((o) => {
    const e = typeof o == "function" ? o(a) : o;
    b(e), i == null || i(e.join(" "));
  }, [i, a]), h = j(() => C(D, s), [s]);
  return /* @__PURE__ */ m(v, { columns: 4, spacing: 2, spacingY: 3, ...I, children: [
    /* @__PURE__ */ l(x, { style: {
      position: "absolute",
      left: "-150vw",
      maxWidth: "1px",
      top: "-150vh",
      maxHeight: "1px",
      overflow: "hidden",
      userSelect: "none"
    }, children: h.map((o, e) => /* @__PURE__ */ l("input", { type: "text", defaultValue: o }, e)) }),
    a.map((o, e) => /* @__PURE__ */ m(S, { position: "relative", borderRadius: 100, overflow: "hidden", children: [
      /* @__PURE__ */ l(w, { borderLeftRadius: 100, bgColor: "transparent", pointerEvents: "none", minH: 0, p: 0, pos: "absolute", top: 0, left: 1, height: "100%", zIndex: 1, border: "none", children: /* @__PURE__ */ l(x, { as: "span", color: "white", fontSize: "xs", fontWeight: "semibold", lineHeight: "none", p: 1, bgColor: "neutrals.600", borderRadius: 100, minH: "5", minW: "5", display: "inline-flex", alignItems: "center", justifyContent: "center", children: e + 1 }) }),
      /* @__PURE__ */ l(g, { "data-testid": `seed-input-${e}`, variant: "filled", autoFocus: e === 0, value: o, size: "pill", pl: 8, autoCapitalize: "none", autoComplete: "off", autoCorrect: "off", spellCheck: "false", onFocus: (t) => {
        f(e), t.target.select();
      }, onBlur: () => f(null), type: d === e ? "text" : "password", fontSize: d === e ? "sm" : "md", onPaste: (t) => {
        t.preventDefault();
        const r = t.clipboardData.getData("text").split(/\s+/).filter((k) => k);
        r.length === s && c(r);
      }, ref: (t) => p.current[e] = t, onKeyDown: (t) => {
        var n, r;
        t.key === "Backspace" && o === "" && e > 0 && (t.preventDefault(), (n = p.current[e - 1]) == null || n.focus()), (t.key === " " || t.key === "Enter") && (t.preventDefault(), o !== "" && ((r = p.current[e + 1]) == null || r.focus()));
      }, onChange: (t) => {
        c((n) => [
          ...n.slice(0, e),
          t.target.value,
          ...n.slice(e + 1)
        ]);
      } })
    ] }, e))
  ] });
};
export {
  E as SeedInput
};
