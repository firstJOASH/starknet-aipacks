import { EventListener, CancelablePromise, AsyncOptions } from '@telegram-apps/bridge';
/**
 * Signal containing the home screen status check request promise.
 */
export declare const checkHomeScreenStatusPromise: import('@telegram-apps/signals').Signal<CancelablePromise<string> | undefined>;
/**
 * Signal containing the home screen status check request error.
 */
export declare const checkHomeScreenStatusError: import('@telegram-apps/signals').Signal<Error | undefined>;
/**
 * Signal indicating if the home screen status check is currently being requested.
 */
export declare const isCheckingHomeScreenStatus: import('@telegram-apps/signals').Computed<boolean>;
/**
 * Prompts the user to add the Mini App to the home screen.
 * @since Mini Apps v8.0
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @example Using `isAvailable`
 * if (addToHomeScreen.isAvailable()) {
 *   addToHomeScreen();
 * }
 * @example Using `ifAvailable`
 * addToHomeScreen.ifAvailable()
 */
export declare const addToHomeScreen: import('../../toolkit/wrapSafe.js').SafeWrapped<() => void, true, never>;
/**
 * Sends a request to the native Telegram application to check if the current mini
 * application is added to the device's home screen.
 * @param options - additional options.
 * @since Mini Apps v8.0
 * @throws {TypedError} ERR_ALREADY_REQUESTING
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @example
 * if (checkHomeScreenStatus.isAvailable()) {
 *   const status = await checkHomeScreenStatus();
 * }
 */
export declare const checkHomeScreenStatus: import('../../toolkit/wrapSafe.js').SafeWrapped<(options?: AsyncOptions | undefined) => CancelablePromise<CancelablePromise<string>>, true, never>;
/**
 * Adds the event listener that being called whenever the user adds the current mini app to the
 * device's home screen.
 *
 * Note that if the device cannot determine the installation status, a corresponding event may
 * not be received even if the icon has been added.
 * @since Mini Apps v8.0
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @example
 * if (onAddedToHomeScreen.isAvailable()) {
 *   const off = onAddedToHomeScreen(() => {
 *     console.log('Added');
 *     off();
 *   });
 * }
 */
export declare const onAddedToHomeScreen: import('../../toolkit/wrapSafe.js').SafeWrapped<(listener: EventListener<"home_screen_added">, once?: boolean) => import('@telegram-apps/signals').RemoveListenerFn, true, never>;
/**
 * Adds the event listener that being called whenever the user declines the request to add the
 * current mini app to the device's home screen.
 * @since Mini Apps v8.0
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @example
 * if (onAddToHomeScreenFailed.isAvailable()) {
 *   const off = onAddToHomeScreenFailed(() => {
 *     console.log('Failed to add to home screen');
 *     off();
 *   });
 * }
 */
export declare const onAddToHomeScreenFailed: import('../../toolkit/wrapSafe.js').SafeWrapped<(listener: EventListener<"home_screen_failed">, once?: boolean) => import('@telegram-apps/signals').RemoveListenerFn, true, never>;
/**
 * Removes add to home screen event listener.
 * @since Mini Apps v8.0
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @example
 * if (onAddedToHomeScreen.isAvailable()) {
 *   const handler = () => {
 *     console.log('Added');
 *     offAddedToHomeScreen(handler);
 *   };
 *   onAddedToHomeScreen(handler);
 * }
 */
export declare const offAddedToHomeScreen: import('../../toolkit/wrapSafe.js').SafeWrapped<(listener: EventListener<"home_screen_added">) => void, true, never>;
/**
 * Removes add to home screen failed event listener.
 * @since Mini Apps v8.0
 * @throws {TypedError} ERR_UNKNOWN_ENV
 * @throws {TypedError} ERR_NOT_INITIALIZED
 * @throws {TypedError} ERR_NOT_SUPPORTED
 * @example
 * if (offAddToHomeScreenFailed.isAvailable()) {
 *   const handler = () => {
 *     console.log('Failed to add');
 *     offAddToHomeScreenFailed(handler);
 *   };
 *   onAddToHomeScreenFailed(handler);
 * }
 */
export declare const offAddToHomeScreenFailed: import('../../toolkit/wrapSafe.js').SafeWrapped<(listener: EventListener<"home_screen_failed">) => void, true, never>;
